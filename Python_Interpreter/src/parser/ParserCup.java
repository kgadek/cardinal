
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 14 15:33:38 CEST 2012
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 14 15:33:38 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\002\000\002\005\004\000\002\005\002\000" +
    "\002\004\005\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\007\005\000\002\007\002\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\012" +
    "\011\000\002\012\006\000\002\012\006\000\002\013\004" +
    "\000\002\014\005\000\002\014\002\000\002\015\004\000" +
    "\002\015\003\000\002\016\004\000\002\016\007\000\002" +
    "\017\004\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\042\002\ufffb\004\026\005\007\006\025\014" +
    "\031\016\004\017\027\021\011\032\013\033\023\034\015" +
    "\036\021\040\012\041\024\042\014\044\010\001\002\000" +
    "\004\014\125\001\002\000\004\002\001\001\002\000\042" +
    "\002\ufffb\004\026\005\007\006\025\014\031\016\004\017" +
    "\027\021\011\032\013\033\023\034\015\036\021\040\012" +
    "\041\024\042\014\044\010\001\002\000\026\005\ufff2\006" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\032\ufff2\033\ufff2" +
    "\036\ufff2\040\ufff2\001\002\000\026\005\007\006\025\014" +
    "\031\016\004\017\027\021\011\032\013\033\023\036\021" +
    "\040\035\001\002\000\026\005\ufff0\006\ufff0\014\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\032\ufff0\033\ufff0\036\ufff0\040\ufff0" +
    "\001\002\000\072\002\uffd9\004\uffd9\005\uffd9\006\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\117\045\uffd9\001\002\000\076\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\045\uffdb\001\002\000\040\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\014\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\032\ufff7\033\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\045\ufff7\001\002\000\026\005\007\006\025\014\031\016" +
    "\004\017\027\021\011\032\013\033\023\036\021\040\035" +
    "\001\002\000\044\002\uffd1\004\uffd1\005\uffd1\006\uffd1\014" +
    "\uffd1\016\uffd1\017\uffd1\021\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\036\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\047\uffd1\001" +
    "\002\000\004\002\077\001\002\000\004\041\076\001\002" +
    "\000\076\002\uffdc\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\045\uffdc\001\002\000" +
    "\070\002\ufff5\004\ufff5\005\046\006\036\010\042\011\047" +
    "\012\040\013\043\014\ufff5\016\ufff5\017\ufff5\021\ufff5\022" +
    "\052\023\044\024\045\025\050\026\053\027\041\030\054" +
    "\031\037\032\ufff5\033\ufff5\036\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\045\ufff5\001\002\000\076\002\uffda\004\uffda\005\uffda" +
    "\006\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\045\uffda\001\002\000\042\002\ufffb\004\026\005\007\006" +
    "\025\014\031\016\004\017\027\021\011\032\013\033\023" +
    "\034\015\036\021\040\012\041\024\042\014\044\010\001" +
    "\002\000\026\005\ufff1\006\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\021\ufff1\032\ufff1\033\ufff1\036\ufff1\040\ufff1\001\002\000" +
    "\026\005\007\006\025\014\031\016\004\017\027\021\011" +
    "\032\013\033\023\036\021\040\035\001\002\000\076\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\045\uffe1\001\002\000\004\002\ufffe" +
    "\001\002\000\026\005\007\006\025\014\031\016\004\017" +
    "\027\021\011\032\013\033\023\036\021\040\035\001\002" +
    "\000\040\002\ufff9\004\026\005\007\006\025\014\031\016" +
    "\004\017\027\021\011\032\013\033\023\036\021\040\012" +
    "\041\uffd3\042\014\045\056\001\002\000\026\005\007\006" +
    "\025\014\031\016\004\017\027\021\011\032\013\033\023" +
    "\036\021\040\035\001\002\000\076\002\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\011\uffe0\012\040\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\045\uffe0\001\002\000\076\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\045\uffd9\001\002\000\026\005\uffee\006\uffee\014\uffee\016" +
    "\uffee\017\uffee\021\uffee\032\uffee\033\uffee\036\uffee\040\uffee" +
    "\001\002\000\026\005\uffe2\006\uffe2\014\uffe2\016\uffe2\017" +
    "\uffe2\021\uffe2\032\uffe2\033\uffe2\036\uffe2\040\uffe2\001\002" +
    "\000\026\005\uffea\006\uffea\014\uffea\016\uffea\017\uffea\021" +
    "\uffea\032\uffea\033\uffea\036\uffea\040\uffea\001\002\000\026" +
    "\005\uffe4\006\uffe4\014\uffe4\016\uffe4\017\uffe4\021\uffe4\032" +
    "\uffe4\033\uffe4\036\uffe4\040\uffe4\001\002\000\026\005\uffed" +
    "\006\uffed\014\uffed\016\uffed\017\uffed\021\uffed\032\uffed\033" +
    "\uffed\036\uffed\040\uffed\001\002\000\026\005\uffeb\006\uffeb" +
    "\014\uffeb\016\uffeb\017\uffeb\021\uffeb\032\uffeb\033\uffeb\036" +
    "\uffeb\040\uffeb\001\002\000\026\005\uffe8\006\uffe8\014\uffe8" +
    "\016\uffe8\017\uffe8\021\uffe8\032\uffe8\033\uffe8\036\uffe8\040" +
    "\uffe8\001\002\000\026\005\uffe7\006\uffe7\014\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\032\uffe7\033\uffe7\036\uffe7\040\uffe7\001" +
    "\002\000\026\005\uffef\006\uffef\014\uffef\016\uffef\017\uffef" +
    "\021\uffef\032\uffef\033\uffef\036\uffef\040\uffef\001\002\000" +
    "\026\005\uffec\006\uffec\014\uffec\016\uffec\017\uffec\021\uffec" +
    "\032\uffec\033\uffec\036\uffec\040\uffec\001\002\000\026\005" +
    "\uffe6\006\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6\032\uffe6" +
    "\033\uffe6\036\uffe6\040\uffe6\001\002\000\026\005\007\006" +
    "\025\014\031\016\004\017\027\021\011\032\013\033\023" +
    "\036\021\040\035\001\002\000\026\005\uffe9\006\uffe9\014" +
    "\uffe9\016\uffe9\017\uffe9\021\uffe9\032\uffe9\033\uffe9\036\uffe9" +
    "\040\uffe9\001\002\000\026\005\uffe5\006\uffe5\014\uffe5\016" +
    "\uffe5\017\uffe5\021\uffe5\032\uffe5\033\uffe5\036\uffe5\040\uffe5" +
    "\001\002\000\026\005\uffe3\006\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\032\uffe3\033\uffe3\036\uffe3\040\uffe3\001\002" +
    "\000\076\002\uffdf\004\uffdf\005\046\006\036\010\042\011" +
    "\047\012\040\013\043\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\052\023\044\024\045\025\050\026" +
    "\053\027\041\030\054\031\037\032\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045\uffdf\001\002\000" +
    "\032\004\026\005\007\006\025\014\031\016\004\017\027" +
    "\021\011\032\013\033\023\036\021\040\012\042\014\001" +
    "\002\000\004\041\uffd5\001\002\000\004\002\uffff\001\002" +
    "\000\034\002\ufff9\004\026\005\007\006\025\014\031\016" +
    "\004\017\027\021\011\032\013\033\023\036\021\040\012" +
    "\042\014\001\002\000\004\002\ufffa\001\002\000\006\041" +
    "\uffd3\045\056\001\002\000\004\041\uffd4\001\002\000\040" +
    "\005\046\006\036\010\042\011\047\012\040\013\043\015" +
    "\066\022\052\023\044\024\045\025\050\026\053\027\041" +
    "\030\054\031\037\001\002\000\076\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\045\uffde\001\002\000\072\002\ufff3\004\ufff3\005\046" +
    "\006\036\010\042\011\047\012\040\013\043\014\ufff3\016" +
    "\ufff3\017\ufff3\020\071\021\ufff3\022\052\023\044\024\045" +
    "\025\050\026\053\027\041\030\054\031\037\032\ufff3\033" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3\001\002" +
    "\000\040\002\ufff8\004\ufff8\005\ufff8\006\ufff8\014\ufff8\016" +
    "\ufff8\017\ufff8\021\ufff8\032\ufff8\033\ufff8\036\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\045\ufff8\001\002\000\026\005\007\006" +
    "\025\014\031\016\004\017\027\021\011\032\013\033\023" +
    "\036\021\040\035\001\002\000\072\002\ufff3\004\ufff3\005" +
    "\046\006\036\010\042\011\047\012\040\013\043\014\ufff3" +
    "\016\ufff3\017\ufff3\020\071\021\ufff3\022\052\023\044\024" +
    "\045\025\050\026\053\027\041\030\054\031\037\032\ufff3" +
    "\033\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3\001" +
    "\002\000\040\002\ufff4\004\ufff4\005\ufff4\006\ufff4\014\ufff4" +
    "\016\ufff4\017\ufff4\021\ufff4\032\ufff4\033\ufff4\036\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\045\ufff4\001\002\000\004\002\ufffd" +
    "\001\002\000\006\041\uffd3\045\056\001\002\000\044\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\014\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\044\uffd2\047\uffd2\001\002\000\004\002\000" +
    "\001\002\000\040\005\046\006\036\010\042\011\047\012" +
    "\040\013\043\022\052\023\044\024\045\025\050\026\053" +
    "\027\041\030\054\031\037\037\101\001\002\000\034\004" +
    "\026\005\007\006\025\014\031\016\004\017\027\021\011" +
    "\032\013\033\023\036\021\040\012\041\103\042\014\001" +
    "\002\000\004\041\116\001\002\000\004\046\110\001\002" +
    "\000\046\002\uffd7\004\uffd7\005\uffd7\006\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\032\uffd7\033\uffd7\034\uffd7\035\105" +
    "\036\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\047\uffd7\001" +
    "\002\000\004\037\106\001\002\000\034\004\026\005\007" +
    "\006\025\014\031\016\004\017\027\021\011\032\013\033" +
    "\023\036\021\040\012\041\103\042\014\001\002\000\044" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\014\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\044\uffd8\047\uffd8\001\002\000\036\004" +
    "\026\005\007\006\025\014\031\016\004\017\027\021\011" +
    "\032\013\033\023\034\015\036\021\040\012\042\014\044" +
    "\010\001\002\000\040\004\026\005\007\006\025\014\031" +
    "\016\004\017\027\021\011\032\013\033\023\034\015\036" +
    "\021\040\012\042\014\044\010\047\uffcd\001\002\000\040" +
    "\004\026\005\007\006\025\014\031\016\004\017\027\021" +
    "\011\032\013\033\023\034\015\036\021\040\012\042\014" +
    "\044\010\047\uffcd\001\002\000\004\047\114\001\002\000" +
    "\046\002\uffcf\004\uffcf\005\uffcf\006\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\047\uffcf\001\002" +
    "\000\004\047\uffce\001\002\000\046\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\044\uffd0\047\uffd0\001\002\000\026\005\007\006\025" +
    "\014\031\016\004\017\027\021\011\032\013\033\023\036" +
    "\021\040\035\001\002\000\070\002\ufff6\004\ufff6\005\046" +
    "\006\036\010\042\011\047\012\040\013\043\014\ufff6\016" +
    "\ufff6\017\ufff6\021\ufff6\022\052\023\044\024\045\025\050" +
    "\026\053\027\041\030\054\031\037\032\ufff6\033\ufff6\036" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\045\ufff6\001\002\000\040" +
    "\005\046\006\036\010\042\011\047\012\040\013\043\022" +
    "\052\023\044\024\045\025\050\026\053\027\041\030\054" +
    "\031\037\037\122\001\002\000\034\004\026\005\007\006" +
    "\025\014\031\016\004\017\027\021\011\032\013\033\023" +
    "\036\021\040\012\041\103\042\014\001\002\000\044\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\014\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\047\uffd6\001\002\000\004\002\ufffc" +
    "\001\002\000\004\015\126\001\002\000\076\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\045\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\024\002\016\003\004\004\031\006\021\010" +
    "\032\012\015\013\017\015\005\020\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\074\006\021\010" +
    "\032\012\015\013\017\015\005\020\123\001\001\000\002" +
    "\001\001\000\006\006\120\010\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\077\010\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\050\001\001\000\002\001\001\000\020\004\074\006" +
    "\021\010\032\012\015\013\017\015\005\020\073\001\001" +
    "\000\002\001\001\000\006\006\066\010\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\064\010\032" +
    "\001\001\000\014\004\060\005\057\006\021\010\032\014" +
    "\056\001\001\000\006\006\033\010\032\001\001\000\004" +
    "\011\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\054\010\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\050\001\001" +
    "\000\010\004\062\006\021\010\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\060\005\061\006\021" +
    "\010\032\001\001\000\002\001\001\000\004\014\063\001" +
    "\001\000\002\001\001\000\004\011\050\001\001\000\002" +
    "\001\001\000\006\007\067\011\050\001\001\000\002\001" +
    "\001\000\006\006\071\010\032\001\001\000\006\007\072" +
    "\011\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\050\001\001\000\014\004\074\006\021\010" +
    "\032\013\101\016\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\074\006\021\010\032\013\101\016\106\001\001\000\002" +
    "\001\001\000\016\004\074\006\021\010\032\012\015\013" +
    "\017\015\110\001\001\000\020\004\074\006\021\010\032" +
    "\012\015\013\017\015\111\017\112\001\001\000\020\004" +
    "\074\006\021\010\032\012\015\013\017\015\111\017\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\117\010\032\001\001" +
    "\000\004\011\050\001\001\000\004\011\050\001\001\000" +
    "\014\004\074\006\021\010\032\013\101\016\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {



  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // suite ::= NEWLINE INDENT statement statement_list DEDENT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // suite ::= stmt_list NEWLINE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= stmt_list NEWLINE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_stmt_semicolon_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_stmt_semicolon_list ::= SEMICOLON simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt_list ::= simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compound_statement ::= WHILE expression COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compound_statement ::= IF expression COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compound_statement ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= INPUT LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression binary_op expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= unary_op expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binary_op ::= AND 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binary_op ::= OR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_op ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_op ::= LESSOREQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_op ::= GREATEROREQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binary_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binary_op ::= LESS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binary_op ::= POW 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binary_op ::= MOD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binary_op ::= DIV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binary_op ::= MULT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_op ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression_comma_list ::= COMMA expression expression_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_statement ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_statement ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_statement ::= PASS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_statement ::= PRINT expression expression_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_statement_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_statement_list ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_newline_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_newline_list ::= statement statement_newline_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_newline_list ::= NEWLINE statement_newline_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= statement_newline_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

