
package parser;

import java_cup.runtime.*;

parser code
{:
:}

action code
{:
:}


terminal		PRINT,
				PLUS,
				MINUS,
				UMINUS,
				MULT,
				DIV,
				POW,
				MOD,
				LEFTPARENTHESE,
				RIGHTPARENTHESE,
				INPUT,
				INTEGER,
				COMMA,
				NOT,
				LESS,
				GREATER,
				EQUAL,
				GREATEROREQUAL,
				LESSOREQUAL,
				NOTEQUAL,
				OR,
				AND,
				TRUE,
				FALSE,
				IF,
				ELSE,
				FLOAT,
				COLON,
				IDENTIFIER,
				NEWLINE,
				PASS,
				ASSIGN,
				WHILE,
				SEMICOLON,
				INDENT,
				DEDENT;

non terminal	program,
				module,
				simple_statement,
				simple_statement_list,
				expression,
				expression_comma_list,
				unary_op,
				binary_op,
				compound_statement,
				stmt_list,
				simple_stmt_semicolon_list,
				statement,
				suite,
				statement_list,
				statement_newline_list;
				
/* Precedences */
precedence left IF, ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LESS, GREATER, LESSOREQUAL, GREATEROREQUAL, EQUAL, NOTEQUAL;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left UMINUS;
precedence left POW;

program						::=	module;

module						::= simple_statement simple_statement_list
								|
								statement_newline_list;

statement_newline_list		::=	NEWLINE statement_newline_list 
								|
								statement statement_newline_list
								|
								/*epsilon*/; 

simple_statement_list		::= simple_statement simple_statement_list
								| 
								/* epsilon */;
							
simple_statement			::= PRINT expression expression_comma_list
								|
								PASS
								|
								IDENTIFIER ASSIGN expression
								|
								expression;

expression_comma_list		::= COMMA expression expression_comma_list
								|
								/*epsilon*/;

unary_op					::= PLUS
								|
								MINUS
								|
								NOT;
							
binary_op					::= PLUS
								|
								MINUS
								|
								MULT
								|
								DIV
								|
								MOD
								|
								POW
								|
								LESS
								|
								GREATER
								|
								EQUAL
								|
								GREATEROREQUAL
								|
								LESSOREQUAL
								|
								NOTEQUAL
								|
								OR
								|
								AND;
								
expression					::= INTEGER
								|
								unary_op expression %prec UMINUS
								|
								expression binary_op expression
								|
								LEFTPARENTHESE expression RIGHTPARENTHESE
								|
								INPUT LEFTPARENTHESE RIGHTPARENTHESE
								|
								FLOAT
								|
								TRUE
								|
								FALSE
								|
								IDENTIFIER;
				
compound_statement			::= IF expression COLON suite ELSE COLON suite
								|
								IF expression COLON suite
								|
								WHILE expression COLON suite;
								
stmt_list					::= simple_statement simple_stmt_semicolon_list;

simple_stmt_semicolon_list	::= SEMICOLON simple_statement simple_stmt_semicolon_list
								|
								/*epsilon*/;
						
statement					::= stmt_list NEWLINE
								|
								compound_statement;
								
suite						::= stmt_list NEWLINE
								|
								NEWLINE INDENT statement statement_list	DEDENT;
								
statement_list				::= statement statement_list
								|
								/*epsilon*/;
