
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 15 21:44:54 CEST 2012
//----------------------------------------------------

package parser;

import python_program.*;
import python_program.expression.*;
import python_program.operators.*;
import python_program.statement.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Collections;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 15 21:44:54 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\005\004\000\002\005\002\000" +
    "\002\004\004\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\007" +
    "\005\000\002\007\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\005\000\002\006\006\000\002\006\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\006\000\002\006\005\000" +
    "\002\006\007\000\002\006\005\000\002\010\011\000\002" +
    "\010\006\000\002\010\006\000\002\010\010\000\002\010" +
    "\012\000\002\010\006\000\002\010\011\000\002\011\005" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\004\000\002\013\006\000\002\014\004\000\002" +
    "\014\003\000\002\016\005\000\002\017\005\000\002\017" +
    "\002\000\002\020\006\000\002\021\003\000\002\021\005" +
    "\000\002\022\005\000\002\022\002\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\056\002\ufffb\004\031\005\010\006\026\014" +
    "\035\016\004\017\032\021\012\032\015\033\030\034\017" +
    "\036\023\040\013\041\027\042\016\044\011\050\041\052" +
    "\036\055\042\056\025\057\014\061\006\001\002\000\004" +
    "\014\236\001\002\000\004\002\001\001\002\000\004\040" +
    "\225\001\002\000\056\002\ufffb\004\031\005\010\006\026" +
    "\014\035\016\004\017\032\021\012\032\015\033\030\034" +
    "\017\036\023\040\013\041\027\042\016\044\011\050\041" +
    "\052\036\055\042\056\025\057\014\061\006\001\002\000" +
    "\034\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\053\050\041\052\036\055" +
    "\042\001\002\000\034\005\010\006\026\014\035\016\004" +
    "\017\032\021\012\032\015\033\030\036\023\040\053\050" +
    "\041\052\036\055\042\001\002\000\034\005\010\006\026" +
    "\014\035\016\004\017\032\021\012\032\015\033\030\036" +
    "\023\040\053\050\041\052\036\055\042\001\002\000\106" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\215\045\uffd9\050\uffd9\052\uffd9\054\uffd9\055\uffd9\057" +
    "\uffd9\060\uffd9\001\002\000\034\005\010\006\026\014\035" +
    "\016\004\017\032\021\012\032\015\033\030\036\023\040" +
    "\053\050\041\052\036\055\042\001\002\000\116\002\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\045\uffdb\050\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\001\002\000\050" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\014\ufff7\016\ufff7\017" +
    "\ufff7\021\ufff7\032\ufff7\033\ufff7\036\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\045\ufff7\050\ufff7\052\ufff7\055\ufff7\057\ufff7\001" +
    "\002\000\034\005\010\006\026\014\035\016\004\017\032" +
    "\021\012\032\015\033\030\036\023\040\053\050\041\052" +
    "\036\055\042\001\002\000\060\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\047\uffc5\050\uffc5\052\uffc5\055\uffc5\056\uffc5\057\uffc5\061" +
    "\uffc5\001\002\000\004\002\205\001\002\000\004\041\204" +
    "\001\002\000\116\002\uffdc\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\045\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\104\002\ufff5\004\ufff5\005\061\006" +
    "\073\010\070\011\072\012\065\013\055\014\074\016\ufff5" +
    "\017\ufff5\021\ufff5\022\075\023\066\024\063\025\071\026" +
    "\067\027\064\030\062\031\056\032\ufff5\033\ufff5\036\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\045\ufff5\050\076\052\ufff5\054" +
    "\057\055\ufff5\057\ufff5\060\202\001\002\000\004\040\160" +
    "\001\002\000\034\005\010\006\026\014\035\016\004\017" +
    "\032\021\012\032\015\033\030\036\023\040\053\050\041" +
    "\052\036\055\042\001\002\000\056\002\ufffb\004\031\005" +
    "\010\006\026\014\035\016\004\017\032\021\012\032\015" +
    "\033\030\034\017\036\023\040\013\041\027\042\016\044" +
    "\011\050\041\052\036\055\042\056\025\057\014\061\006" +
    "\001\002\000\116\002\uffda\004\uffda\005\uffda\006\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\045\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\057\uffda" +
    "\060\uffda\001\002\000\034\005\010\006\026\014\035\016" +
    "\004\017\032\021\012\032\015\033\030\036\023\040\053" +
    "\050\041\052\036\055\042\001\002\000\116\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\045\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\057\ufff0\060\ufff0\001\002\000\106\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffbc\045\uffd6\050\uffd6\052\uffd6\054\uffd6\055\uffd6\057\uffd6" +
    "\060\uffd6\001\002\000\004\002\ufffe\001\002\000\034\005" +
    "\010\006\026\014\035\016\004\017\032\021\012\032\015" +
    "\033\030\036\023\040\053\050\041\052\036\055\042\001" +
    "\002\000\034\005\010\006\026\014\035\016\004\017\032" +
    "\021\012\032\015\033\030\036\023\040\053\050\041\052" +
    "\036\055\042\001\002\000\050\002\ufff9\004\031\005\010" +
    "\006\026\014\035\016\004\017\032\021\012\032\015\033" +
    "\030\036\023\040\013\041\uffc7\042\016\045\134\050\041" +
    "\052\036\055\042\057\014\001\002\000\004\043\132\001" +
    "\002\000\034\005\010\006\026\014\035\016\004\017\032" +
    "\021\012\032\015\033\030\036\023\040\053\050\041\052" +
    "\036\055\042\001\002\000\006\037\043\040\044\001\002" +
    "\000\034\005\010\006\026\014\035\016\004\017\032\021" +
    "\012\032\015\033\030\036\023\040\053\050\041\052\036" +
    "\055\042\001\002\000\006\020\046\037\uffb9\001\002\000" +
    "\004\037\051\001\002\000\004\040\047\001\002\000\010" +
    "\015\uffb9\020\046\037\uffb9\001\002\000\006\015\uffba\037" +
    "\uffba\001\002\000\034\005\010\006\026\014\035\016\004" +
    "\017\032\021\012\032\015\033\030\036\023\040\053\050" +
    "\041\052\036\055\042\001\002\000\116\002\uffd1\004\uffd1" +
    "\005\061\006\073\010\070\011\072\012\065\013\055\014" +
    "\074\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\075" +
    "\023\066\024\063\025\071\026\067\027\064\030\062\031" +
    "\056\032\uffd1\033\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\045\uffd1\050\076\051\uffd1\052\uffd1\053\uffd1\054" +
    "\057\055\uffd1\057\uffd1\060\060\001\002\000\116\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001\002\000\116" +
    "\002\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\045\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\001\002" +
    "\000\034\005\010\006\026\014\035\016\004\017\032\021" +
    "\012\032\015\033\030\036\023\040\053\050\041\052\036" +
    "\055\042\001\002\000\034\005\010\006\026\014\035\016" +
    "\004\017\032\021\012\032\015\033\030\036\023\040\053" +
    "\050\041\052\036\055\042\001\002\000\034\005\010\006" +
    "\026\014\035\016\004\017\032\021\012\032\015\033\030" +
    "\036\023\040\053\050\041\052\036\055\042\001\002\000" +
    "\004\040\123\001\002\000\034\005\010\006\026\014\035" +
    "\016\004\017\032\021\012\032\015\033\030\036\023\040" +
    "\053\050\041\052\036\055\042\001\002\000\034\005\010" +
    "\006\026\014\035\016\004\017\032\021\012\032\015\033" +
    "\030\036\023\040\053\050\041\052\036\055\042\001\002" +
    "\000\034\005\010\006\026\014\035\016\004\017\032\021" +
    "\012\032\015\033\030\036\023\040\053\050\041\052\036" +
    "\055\042\001\002\000\034\005\010\006\026\014\035\016" +
    "\004\017\032\021\012\032\015\033\030\036\023\040\053" +
    "\050\041\052\036\055\042\001\002\000\034\005\010\006" +
    "\026\014\035\016\004\017\032\021\012\032\015\033\030" +
    "\036\023\040\053\050\041\052\036\055\042\001\002\000" +
    "\034\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\053\050\041\052\036\055" +
    "\042\001\002\000\034\005\010\006\026\014\035\016\004" +
    "\017\032\021\012\032\015\033\030\036\023\040\053\050" +
    "\041\052\036\055\042\001\002\000\034\005\010\006\026" +
    "\014\035\016\004\017\032\021\012\032\015\033\030\036" +
    "\023\040\053\050\041\052\036\055\042\001\002\000\034" +
    "\005\010\006\026\014\035\016\004\017\032\021\012\032" +
    "\015\033\030\036\023\040\053\050\041\052\036\055\042" +
    "\001\002\000\034\005\010\006\026\014\035\016\004\017" +
    "\032\021\012\032\015\033\030\036\023\040\053\050\041" +
    "\052\036\055\042\001\002\000\034\005\010\006\026\014" +
    "\035\016\004\017\032\021\012\032\015\033\030\036\023" +
    "\040\053\050\041\052\036\055\042\001\002\000\036\005" +
    "\010\006\026\014\035\015\102\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\053\050\041\052\036\055" +
    "\042\001\002\000\034\005\010\006\026\014\035\016\004" +
    "\017\032\021\012\032\015\033\030\036\023\040\053\050" +
    "\041\052\036\055\042\001\002\000\034\005\010\006\026" +
    "\014\035\016\004\017\032\021\012\032\015\033\030\036" +
    "\023\040\053\050\041\052\036\055\042\001\002\000\050" +
    "\005\061\006\073\010\070\011\072\012\065\013\055\014" +
    "\074\022\075\023\066\024\063\025\071\026\067\027\064" +
    "\030\062\031\056\050\076\051\100\054\057\060\060\001" +
    "\002\000\120\002\uffbd\004\uffbd\005\uffbd\006\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057" +
    "\uffbd\060\uffbd\001\002\000\116\002\uffe6\004\uffe6\005\061" +
    "\006\073\010\070\011\072\012\065\013\055\014\074\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\045\uffe6\050\076\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\057\uffe6\060\uffe6\001\002\000\116\002\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\045\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\057\uffd4\060\uffd4\001\002\000\112\002\ufff1" +
    "\004\ufff1\005\061\006\073\010\070\011\072\012\065\013" +
    "\055\014\074\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\075\023\066\024\063\025\071\026\067\027\064\030" +
    "\062\031\056\032\ufff1\033\ufff1\036\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\045\ufff1\050\076\051\ufff1\052\ufff1\054\057\055" +
    "\ufff1\057\ufff1\060\060\001\002\000\006\015\106\020\105" +
    "\001\002\000\034\005\010\006\026\014\035\016\004\017" +
    "\032\021\012\032\015\033\030\036\023\040\053\050\041" +
    "\052\036\055\042\001\002\000\116\002\uffd3\004\uffd3\005" +
    "\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\045\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\057\uffd3\060\uffd3\001\002\000\112\002\ufff2\004" +
    "\ufff2\005\061\006\073\010\070\011\072\012\065\013\055" +
    "\014\074\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\075\023\066\024\063\025\071\026\067\027\064\030\062" +
    "\031\056\032\ufff2\033\ufff2\036\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\045\ufff2\050\076\051\ufff2\052\ufff2\054\057\055\ufff2" +
    "\057\ufff2\060\060\001\002\000\116\002\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\010\070\011\072\012\065\013\055\014\074" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\045\uffeb\050\076\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\057\uffeb\060\uffeb\001\002\000\116\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\012\065\013\uffe9" +
    "\014\074\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\045\uffe9\050\076\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\057\uffe9\060\uffe9\001\002\000\116\002" +
    "\uffe3\004\uffe3\005\061\006\073\010\070\011\072\012\065" +
    "\013\055\014\074\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\045\uffe3\050\076\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\001\002\000" +
    "\116\002\uffea\004\uffea\005\uffea\006\uffea\010\uffea\011\uffea" +
    "\012\065\013\uffea\014\074\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\045\uffea\050\076\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\057\uffea\060\uffea\001" +
    "\002\000\116\002\uffe2\004\uffe2\005\061\006\073\010\070" +
    "\011\072\012\065\013\055\014\074\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\050\076" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060" +
    "\uffe2\001\002\000\116\002\uffe5\004\uffe5\005\061\006\073" +
    "\010\070\011\072\012\065\013\055\014\074\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5" +
    "\050\076\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057" +
    "\uffe5\060\uffe5\001\002\000\116\002\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\074\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\045\uffe7\050\076\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\057\uffe7\060\uffe7\001\002\000\116\002\uffe1\004\uffe1" +
    "\005\061\006\073\010\070\011\072\012\065\013\055\014" +
    "\074\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\045\uffe1\050\076\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\057\uffe1\060\uffe1\001\002\000\116\002\uffe4" +
    "\004\uffe4\005\061\006\073\010\070\011\072\012\065\013" +
    "\055\014\074\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\045\uffe4\050\076\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4\001\002\000\116" +
    "\002\uffe0\004\uffe0\005\061\006\073\010\070\011\072\012" +
    "\065\013\055\014\074\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\075\023\066\024\063\025\071\026\067\027" +
    "\064\030\uffe0\031\056\032\uffe0\033\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\045\uffe0\050\076\051\uffe0\052" +
    "\uffe0\053\uffe0\054\057\055\uffe0\057\uffe0\060\uffe0\001\002" +
    "\000\116\002\uffec\004\uffec\005\uffec\006\uffec\010\070\011" +
    "\072\012\065\013\055\014\074\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\045\uffec\050\076\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\057\uffec\060\uffec" +
    "\001\002\000\116\002\uffd0\004\uffd0\005\uffd0\006\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\045\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0" +
    "\060\uffd0\001\002\000\116\002\uffd5\004\uffd5\005\061\006" +
    "\073\010\070\011\072\012\065\013\055\014\074\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\045" +
    "\uffd5\050\076\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\057\uffd5\060\uffd5\001\002\000\116\002\uffdf\004\uffdf\005" +
    "\061\006\073\010\070\011\072\012\065\013\055\014\074" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\075\023" +
    "\066\024\063\025\071\026\067\027\064\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\045\uffdf\050\076\051\uffdf\052\uffdf\053\uffdf\054\057" +
    "\055\uffdf\057\uffdf\060\uffdf\001\002\000\116\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\012\065\013\uffe8" +
    "\014\074\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\045\uffe8\050\076\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\057\uffe8\060\uffe8\001\002\000\116\002" +
    "\uffd2\004\uffd2\005\061\006\073\010\070\011\072\012\065" +
    "\013\055\014\074\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\075\023\066\024\063\025\071\026\067\027\064" +
    "\030\062\031\056\032\uffd2\033\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\045\uffd2\050\076\051\uffd2\052\uffd2" +
    "\053\uffd2\054\057\055\uffd2\057\uffd2\060\060\001\002\000" +
    "\006\020\105\051\131\001\002\000\116\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\045\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\057\uffd8\060\uffd8\001\002\000\034\005\010" +
    "\006\026\014\035\016\004\017\032\021\012\032\015\033" +
    "\030\036\023\040\053\050\041\052\036\055\042\001\002" +
    "\000\104\002\ufff4\004\ufff4\005\061\006\073\010\070\011" +
    "\072\012\065\013\055\014\074\016\ufff4\017\ufff4\021\ufff4" +
    "\022\075\023\066\024\063\025\071\026\067\027\064\030" +
    "\062\031\056\032\ufff4\033\ufff4\036\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\045\ufff4\050\076\052\ufff4\054\057\055\ufff4\057" +
    "\ufff4\060\060\001\002\000\042\004\031\005\010\006\026" +
    "\014\035\016\004\017\032\021\012\032\015\033\030\036" +
    "\023\040\013\042\016\050\041\052\036\055\042\057\014" +
    "\001\002\000\004\002\uffff\001\002\000\044\002\ufff9\004" +
    "\031\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\013\042\016\050\041\052" +
    "\036\055\042\057\014\001\002\000\004\002\ufffa\001\002" +
    "\000\004\041\uffc8\001\002\000\006\041\uffc7\045\134\001" +
    "\002\000\050\005\061\006\073\010\070\011\072\012\065" +
    "\013\055\014\074\022\075\023\066\024\063\025\071\026" +
    "\067\027\064\030\062\031\056\037\151\050\076\054\057" +
    "\060\060\001\002\000\006\020\144\053\uffbe\001\002\000" +
    "\034\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\053\050\041\052\036\055" +
    "\042\001\002\000\004\053\146\001\002\000\116\002\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\045\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7\001\002\000\006" +
    "\020\144\053\uffbe\001\002\000\004\053\uffbf\001\002\000" +
    "\034\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\053\050\041\052\036\055" +
    "\042\001\002\000\052\005\061\006\073\010\070\011\072" +
    "\012\065\013\055\014\074\020\uffc0\022\075\023\066\024" +
    "\063\025\071\026\067\027\064\030\062\031\056\050\076" +
    "\053\uffc0\054\057\060\060\001\002\000\050\005\061\006" +
    "\073\010\070\011\072\012\065\013\055\014\074\015\154" +
    "\022\075\023\066\024\063\025\071\026\067\027\064\030" +
    "\062\031\056\050\076\054\057\060\060\001\002\000\116" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\045\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\057\uffde\060\uffde\001\002" +
    "\000\052\002\ufff8\004\ufff8\005\ufff8\006\ufff8\014\ufff8\016" +
    "\ufff8\017\ufff8\020\105\021\ufff8\032\ufff8\033\ufff8\036\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\045\ufff8\050\ufff8\052\ufff8\055" +
    "\ufff8\057\ufff8\001\002\000\004\002\ufffd\001\002\000\116" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\010\uffef\011\uffef\012" +
    "\065\013\uffef\014\074\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\045\uffef\050\076\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\057\uffef\060\uffef\001\002" +
    "\000\004\014\161\001\002\000\006\015\162\040\163\001" +
    "\002\000\004\037\200\001\002\000\006\015\uffb9\020\046" +
    "\001\002\000\004\015\165\001\002\000\004\037\166\001" +
    "\002\000\044\004\031\005\010\006\026\014\035\016\004" +
    "\017\032\021\012\032\015\033\030\036\023\040\013\041" +
    "\170\042\016\050\041\052\036\055\042\057\014\001\002" +
    "\000\004\041\177\001\002\000\004\046\172\001\002\000" +
    "\060\002\uffcb\004\uffcb\005\uffcb\006\uffcb\014\uffcb\016\uffcb" +
    "\017\uffcb\021\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\044\uffcb\047\uffcb\050\uffcb\052\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\061\uffcb\001\002\000\052\004" +
    "\031\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\034\017\036\023\040\013\042\016\044" +
    "\011\050\041\052\036\055\042\056\025\057\014\061\006" +
    "\001\002\000\054\004\uffc1\005\uffc1\006\uffc1\014\uffc1\016" +
    "\uffc1\017\uffc1\021\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1" +
    "\040\uffc1\042\uffc1\044\uffc1\047\uffc1\050\uffc1\052\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\061\uffc1\001\002\000\054\004\031" +
    "\005\010\006\026\014\035\016\004\017\032\021\012\032" +
    "\015\033\030\034\017\036\023\040\013\042\016\044\011" +
    "\047\176\050\041\052\036\055\042\056\025\057\014\061" +
    "\006\001\002\000\054\004\uffc2\005\uffc2\006\uffc2\014\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\032\uffc2\033\uffc2\034\uffc2\036" +
    "\uffc2\040\uffc2\042\uffc2\044\uffc2\047\uffc2\050\uffc2\052\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\061\uffc2\001\002\000\062\002" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\014\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\044\uffc3\047\uffc3\050\uffc3\052\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\061\uffc3\001\002\000\062\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\014\uffc4\016\uffc4\017\uffc4" +
    "\021\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\044\uffc4\047\uffc4\050\uffc4\052\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\061\uffc4\001\002\000\044\004" +
    "\031\005\010\006\026\014\035\016\004\017\032\021\012" +
    "\032\015\033\030\036\023\040\013\041\170\042\016\050" +
    "\041\052\036\055\042\057\014\001\002\000\060\002\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\014\uffcc\016\uffcc\017\uffcc\021" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\044\uffcc\047\uffcc\050\uffcc\052\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\061\uffcc\001\002\000\004\040\203\001\002" +
    "\000\106\002\uffd0\004\uffd0\005\uffd0\006\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\036\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffbb\045\uffd0\050\uffd0\052\uffd0\054\uffd0\055" +
    "\uffd0\057\uffd0\060\uffd0\001\002\000\060\002\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\014\uffc6\016\uffc6\017\uffc6\021\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\044\uffc6\047\uffc6\050\uffc6\052\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\061\uffc6\001\002\000\004\002\000\001\002\000\050" +
    "\005\061\006\073\010\070\011\072\012\065\013\055\014" +
    "\074\022\075\023\066\024\063\025\071\026\067\027\064" +
    "\030\062\031\056\037\207\050\076\054\057\060\060\001" +
    "\002\000\044\004\031\005\010\006\026\014\035\016\004" +
    "\017\032\021\012\032\015\033\030\036\023\040\013\041" +
    "\170\042\016\050\041\052\036\055\042\057\014\001\002" +
    "\000\062\002\uffce\004\uffce\005\uffce\006\uffce\014\uffce\016" +
    "\uffce\017\uffce\021\uffce\032\uffce\033\uffce\034\uffce\035\211" +
    "\036\uffce\040\uffce\041\uffce\042\uffce\044\uffce\047\uffce\050" +
    "\uffce\052\uffce\055\uffce\056\uffce\057\uffce\061\uffce\001\002" +
    "\000\004\037\212\001\002\000\044\004\031\005\010\006" +
    "\026\014\035\016\004\017\032\021\012\032\015\033\030" +
    "\036\023\040\013\041\170\042\016\050\041\052\036\055" +
    "\042\057\014\001\002\000\060\002\uffcf\004\uffcf\005\uffcf" +
    "\006\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf" +
    "\047\uffcf\050\uffcf\052\uffcf\055\uffcf\056\uffcf\057\uffcf\061" +
    "\uffcf\001\002\000\104\002\ufff3\004\ufff3\005\061\006\073" +
    "\010\070\011\072\012\065\013\055\014\074\016\ufff3\017" +
    "\ufff3\021\ufff3\022\075\023\066\024\063\025\071\026\067" +
    "\027\064\030\062\031\056\032\ufff3\033\ufff3\036\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\045\ufff3\050\076\052\ufff3\054\057" +
    "\055\ufff3\057\ufff3\060\060\001\002\000\034\005\010\006" +
    "\026\014\035\016\004\017\032\021\012\032\015\033\030" +
    "\036\023\040\053\050\041\052\036\055\042\001\002\000" +
    "\104\002\ufff6\004\ufff6\005\061\006\073\010\070\011\072" +
    "\012\065\013\055\014\074\016\ufff6\017\ufff6\021\ufff6\022" +
    "\075\023\066\024\063\025\071\026\067\027\064\030\062" +
    "\031\056\032\ufff6\033\ufff6\036\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\045\ufff6\050\076\052\ufff6\054\057\055\ufff6\057\ufff6" +
    "\060\060\001\002\000\116\002\uffed\004\uffed\005\061\006" +
    "\073\010\070\011\072\012\065\013\055\014\074\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\075\023\066\024" +
    "\063\025\071\026\067\027\064\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\045" +
    "\uffed\050\076\051\uffed\052\uffed\053\uffed\054\057\055\uffed" +
    "\057\uffed\060\uffed\001\002\000\050\005\061\006\073\010" +
    "\070\011\072\012\065\013\055\014\074\022\075\023\066" +
    "\024\063\025\071\026\067\027\064\030\062\031\056\037" +
    "\221\050\076\054\057\060\060\001\002\000\044\004\031" +
    "\005\010\006\026\014\035\016\004\017\032\021\012\032" +
    "\015\033\030\036\023\040\013\041\170\042\016\050\041" +
    "\052\036\055\042\057\014\001\002\000\060\002\uffcd\004" +
    "\uffcd\005\uffcd\006\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\047\uffcd\050\uffcd\052\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\061\uffcd\001\002\000\116\002\uffee\004\uffee\005" +
    "\uffee\006\uffee\010\uffee\011\uffee\012\065\013\uffee\014\074" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\045\uffee\050\076\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\057\uffee\060\uffee\001\002\000\004\002\ufffc\001" +
    "\002\000\006\014\226\037\227\001\002\000\034\005\010" +
    "\006\026\014\035\016\004\017\032\021\012\032\015\033" +
    "\030\036\023\040\053\050\041\052\036\055\042\001\002" +
    "\000\044\004\031\005\010\006\026\014\035\016\004\017" +
    "\032\021\012\032\015\033\030\036\023\040\013\041\170" +
    "\042\016\050\041\052\036\055\042\057\014\001\002\000" +
    "\060\002\uffca\004\uffca\005\uffca\006\uffca\014\uffca\016\uffca" +
    "\017\uffca\021\uffca\032\uffca\033\uffca\034\uffca\036\uffca\040" +
    "\uffca\041\uffca\042\uffca\044\uffca\047\uffca\050\uffca\052\uffca" +
    "\055\uffca\056\uffca\057\uffca\061\uffca\001\002\000\006\015" +
    "\uffb8\020\105\001\002\000\004\015\233\001\002\000\004" +
    "\037\234\001\002\000\044\004\031\005\010\006\026\014" +
    "\035\016\004\017\032\021\012\032\015\033\030\036\023" +
    "\040\013\041\170\042\016\050\041\052\036\055\042\057" +
    "\014\001\002\000\060\002\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\014\uffc9\016\uffc9\017\uffc9\021\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\047\uffc9" +
    "\050\uffc9\052\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9\001" +
    "\002\000\004\015\237\001\002\000\116\002\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\057\uffdd\060\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\026\002\020\003\004\004\036\006\023\010" +
    "\017\011\021\012\006\015\033\020\032\021\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\140\006\023\010\017\011\021\012\006\015\223" +
    "\020\032\021\037\001\001\000\006\006\222\020\053\001" +
    "\001\000\006\006\217\020\053\001\001\000\006\006\216" +
    "\020\053\001\001\000\002\001\001\000\006\006\213\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\205\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\156\020\053\001\001\000" +
    "\022\004\140\006\023\010\017\011\021\012\006\015\155" +
    "\020\032\021\037\001\001\000\002\001\001\000\010\006" +
    "\102\007\154\020\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\152\020\053\001" +
    "\001\000\010\006\141\016\142\020\053\001\001\000\014" +
    "\004\135\005\134\006\023\020\032\021\037\001\001\000" +
    "\002\001\001\000\010\006\102\007\127\020\053\001\001" +
    "\000\002\001\001\000\006\006\126\020\053\001\001\000" +
    "\004\022\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\047\001\001\000\002\001\001\000\006\006" +
    "\051\020\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\125\020\053\001\001\000" +
    "\006\006\124\020\053\001\001\000\006\006\123\020\053" +
    "\001\001\000\002\001\001\000\006\006\121\020\053\001" +
    "\001\000\006\006\120\020\053\001\001\000\006\006\117" +
    "\020\053\001\001\000\006\006\116\020\053\001\001\000" +
    "\006\006\115\020\053\001\001\000\006\006\114\020\053" +
    "\001\001\000\006\006\113\020\053\001\001\000\006\006" +
    "\112\020\053\001\001\000\006\006\111\020\053\001\001" +
    "\000\006\006\110\020\053\001\001\000\006\006\107\020" +
    "\053\001\001\000\010\006\102\007\103\020\053\001\001" +
    "\000\006\006\100\020\053\001\001\000\006\006\076\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\106\020\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\132\020\053\001\001\000\002\001\001\000\014\004" +
    "\140\006\023\011\137\020\032\021\037\001\001\000\002" +
    "\001\001\000\014\004\135\005\136\006\023\020\032\021" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\144\001\001\000" +
    "\010\006\141\016\146\020\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\147\001\001\000\002\001" +
    "\001\000\006\006\151\020\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\140\006\023" +
    "\011\166\013\170\020\032\021\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\140" +
    "\006\023\010\017\011\021\012\172\014\173\020\032\021" +
    "\037\001\001\000\002\001\001\000\020\004\140\006\023" +
    "\010\017\011\021\012\174\020\032\021\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\140\006\023\011\166\013\200\020\032\021\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\140\006\023\011\166\013\207\020\032\021\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\140\006\023\011\166\013\212\020\032\021\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\215\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\140\006\023\011\166\013\221\020" +
    "\032\021\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\102\007" +
    "\230\020\053\023\231\001\001\000\016\004\140\006\023" +
    "\011\166\013\227\020\032\021\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\140\006\023\011\166\013\234\020\032\021" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {



  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_list ::= expression_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_list",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // identifier_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // identifier_comma_list ::= COMMA IDENTIFIER identifier_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // target ::= expression FULLSTOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("target",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // target ::= subscription 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("target",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subscription ::= expression LEFTSQUAREBRACKET expression RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new SubscriptionExpression((Expression)expr1, (Expression)expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("subscription",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // key_datum_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum_comma_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // key_datum_comma_list ::= COMMA key_datum key_datum_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum_comma_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // key_datum ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement_list ::= statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										List<Statement> list = new LinkedList<Statement>();
										list.addAll((List<Statement>)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										((List<Statement>)list).addAll((List<Statement>)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // suite ::= NEWLINE INDENT statement_list DEDENT 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = (List<Statement>)list;	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // suite ::= stmt_list NEWLINE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = (List<Statement>)list;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= compound_statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
										List<Statement> list = new LinkedList<Statement>();
										list.add((Statement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= stmt_list NEWLINE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = list; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt_list ::= simple_statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										List<Statement> list = new LinkedList<Statement>();
										list.add((Statement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt_list ::= simple_statement SEMICOLON stmt_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
										((List<Statement>)list).add((Statement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // compound_statement ::= CLASS IDENTIFIER LEFTPARENTHESE expression_list RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // compound_statement ::= CLASS IDENTIFIER COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // compound_statement ::= DEF IDENTIFIER LEFTPARENTHESE IDENTIFIER identifier_comma_list RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // compound_statement ::= DEF IDENTIFIER LEFTPARENTHESE RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // compound_statement ::= WHILE expression COLON suite 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										RESULT = new WhileStatement((Expression)expr, (List<Statement>)list);
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // compound_statement ::= IF expression COLON suite 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										RESULT = new IfStatement((Expression)expr, (List<Statement>)list);
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // compound_statement ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										RESULT = new IfElseStatement((Expression)expr, (List<Statement>)list1, (List<Statement>)list2);
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression FULLSTOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= LAMBDA IDENTIFIER identifier_comma_list COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= LAMBDA COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression LEFTPARENTHESE expression_comma_list RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression IS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IsExpression((Expression)expr1, (Expression)expr2);	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= subscription 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = value; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= LEFTCURLYBRACKET key_datum key_datum_comma_list RIGHTCURLYBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= LEFTSQUAREBRACKET expression_comma_list RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ListExpression((List<Expression>)list);	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IdentifierExpression((String)value);	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new FalseExpression(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new TrueExpression(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= FLOAT 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new FloatExpression(((String)value)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= INPUT LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;
		 RESULT = new InputExpression(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ParenthesesExpression((Expression)expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.and, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.or, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression NOTEQUAL expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.notequal, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression LESSOREQUAL expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.lessorequal, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression GREATEROREQUAL expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.greaterorequal, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression EQUAL expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.equal, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.greater, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.less, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression POW expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.pow, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.mod, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.div, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.mult, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.sub, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.add, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.not, (Expression) expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= PLUS expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.add, (Expression) expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= MINUS expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.sub, (Expression) expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= INTEGER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IntegerExpression((String)value); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_comma_list ::= expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
										List<Expression> list = new LinkedList<Expression>();
										list.add((Expression)expr);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_comma_list ::= expression_comma_list COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
										((List<Expression>)list).add((Expression)expr); 
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_statement ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_statement ::= target ASSIGN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_statement ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_statement ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										RESULT = new AssignStatement(new IdentifierExpression((String)value), (Expression)expr);
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_statement ::= PASS 
            {
              Object RESULT =null;
		
										RESULT = new PassStatement();
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_statement ::= PRINT expression_comma_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
										RESULT = new PrintStatement((List<Expression>)list); 
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_statement_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_statement_list ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<Statement>)list).add((Statement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_newline_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_newline_list ::= statement statement_newline_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			((List<Statement>)list).addAll((List<Statement>)stmt);
									RESULT = list;
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_newline_list ::= NEWLINE statement_newline_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			RESULT = list; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= statement_newline_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<Statement>)list).add((Statement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	Collections.reverse((List<Statement>)list);
									RESULT = new Program((List<Statement>)list);
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

