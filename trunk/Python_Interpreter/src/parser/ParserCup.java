
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 27 17:05:02 CEST 2012
//----------------------------------------------------

package parser;

import python_program.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Collections;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 27 17:05:02 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\002\000\002\005\004\000\002\005\002\000" +
    "\002\004\004\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\007" +
    "\005\000\002\007\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\027\003\000\002\027\004\000\002\027\004\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\006" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\005\000\002\006\006\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\005\000\002\006\007\000\002\006\005\000\002\012\011" +
    "\000\002\012\006\000\002\012\006\000\002\012\010\000" +
    "\002\012\012\000\002\012\006\000\002\012\011\000\002" +
    "\013\004\000\002\014\005\000\002\014\002\000\002\015" +
    "\004\000\002\015\003\000\002\016\004\000\002\016\007" +
    "\000\002\017\004\000\002\017\002\000\002\021\005\000" +
    "\002\022\005\000\002\022\002\000\002\023\006\000\002" +
    "\024\003\000\002\024\005\000\002\025\005\000\002\025" +
    "\002\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\054\002\ufffb\004\031\005\010\006\030\014" +
    "\035\016\004\017\033\032\014\033\027\034\015\036\022" +
    "\040\013\041\026\042\016\044\011\050\041\052\036\055" +
    "\042\056\025\057\012\061\006\001\002\000\004\014\220" +
    "\001\002\000\004\002\001\001\002\000\004\040\207\001" +
    "\002\000\054\002\ufffb\004\031\005\010\006\030\014\035" +
    "\016\004\017\033\032\014\033\027\034\015\036\022\040" +
    "\013\041\026\042\016\044\011\050\041\052\036\055\042" +
    "\056\025\057\012\061\006\001\002\000\032\005\010\006" +
    "\030\014\035\016\004\017\033\032\014\033\027\036\022" +
    "\040\046\050\041\052\036\055\042\001\002\000\032\005" +
    "\010\006\030\014\035\016\004\017\033\032\014\033\027" +
    "\036\022\040\046\050\041\052\036\055\042\001\002\000" +
    "\032\005\010\006\030\014\035\016\004\017\033\032\014" +
    "\033\027\036\022\040\046\050\041\052\036\055\042\001" +
    "\002\000\064\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\032" +
    "\uffd2\033\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\177" +
    "\045\uffd2\050\uffd2\052\uffd2\054\uffd2\055\uffd2\057\uffd2\060" +
    "\uffd2\001\002\000\074\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\045\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\001\002" +
    "\000\032\005\010\006\030\014\035\016\004\017\033\032" +
    "\014\033\027\036\022\040\046\050\041\052\036\055\042" +
    "\001\002\000\046\002\ufff7\004\ufff7\005\ufff7\006\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\032\ufff7\033\ufff7\036\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\045\ufff7\050\ufff7\052\ufff7\055\ufff7\057" +
    "\ufff7\001\002\000\056\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\014\uffbd\016\uffbd\017\uffbd\032\uffbd\033\uffbd\034\uffbd\036" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\047\uffbd\050\uffbd" +
    "\052\uffbd\055\uffbd\056\uffbd\057\uffbd\061\uffbd\001\002\000" +
    "\004\002\170\001\002\000\004\041\167\001\002\000\074" +
    "\002\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\032\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\045\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\057\uffd5\060\uffd5\001\002\000\062\002\ufff5\004" +
    "\ufff5\005\054\006\050\010\052\011\055\012\051\013\053" +
    "\014\060\016\ufff5\017\ufff5\032\ufff5\033\ufff5\036\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\045\ufff5\050\057\052\ufff5\054\061" +
    "\055\ufff5\057\ufff5\060\165\001\002\000\074\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\032\uffd8\033" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\045\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\057" +
    "\uffd8\060\uffd8\001\002\000\004\040\142\001\002\000\054" +
    "\002\ufffb\004\031\005\010\006\030\014\035\016\004\017" +
    "\033\032\014\033\027\034\015\036\022\040\013\041\026" +
    "\042\016\044\011\050\041\052\036\055\042\056\025\057" +
    "\012\061\006\001\002\000\074\002\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\032\uffd3\033\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\045\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3" +
    "\001\002\000\032\005\010\006\030\014\035\016\004\017" +
    "\033\032\014\033\027\036\022\040\046\050\041\052\036" +
    "\055\042\001\002\000\032\005\010\006\030\014\035\016" +
    "\004\017\033\032\014\033\027\036\022\040\046\050\041" +
    "\052\036\055\042\001\002\000\064\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\017\uffcf\032\uffcf\033\uffcf\036\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffb4\045\uffcf\050\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\057\uffcf\060\uffcf\001\002\000\074\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\032\uffe1\033" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057" +
    "\uffe1\060\uffe1\001\002\000\004\002\ufffe\001\002\000\032" +
    "\005\010\006\030\014\035\016\004\017\033\032\014\033" +
    "\027\036\022\040\046\050\041\052\036\055\042\001\002" +
    "\000\032\005\010\006\030\014\035\016\004\017\033\032" +
    "\014\033\027\036\022\040\046\050\041\052\036\055\042" +
    "\001\002\000\046\002\ufff9\004\031\005\010\006\030\014" +
    "\035\016\004\017\033\032\014\033\027\036\022\040\013" +
    "\041\uffbf\042\016\045\114\050\041\052\036\055\042\057" +
    "\012\001\002\000\004\043\112\001\002\000\032\005\010" +
    "\006\030\014\035\016\004\017\033\032\014\033\027\036" +
    "\022\040\046\050\041\052\036\055\042\001\002\000\006" +
    "\037\044\040\043\001\002\000\006\020\103\037\uffb1\001" +
    "\002\000\032\005\010\006\030\014\035\016\004\017\033" +
    "\032\014\033\027\036\022\040\046\050\041\052\036\055" +
    "\042\001\002\000\074\002\uffcb\004\uffcb\005\054\006\050" +
    "\010\052\011\055\012\051\013\053\014\060\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\045\uffcb\050\057\051\uffcb\052" +
    "\uffcb\053\uffcb\054\061\055\uffcb\057\uffcb\060\056\001\002" +
    "\000\074\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\032\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\045\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\057\uffd2\060\uffd2\001\002\000\074\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\032" +
    "\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\045\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\057\uffcf\060\uffcf\001\002\000\032\005\010\006\030" +
    "\014\035\016\004\017\033\032\014\033\027\036\022\040" +
    "\046\050\041\052\036\055\042\001\002\000\032\005\010" +
    "\006\030\014\035\016\004\017\033\032\014\033\027\036" +
    "\022\040\046\050\041\052\036\055\042\001\002\000\032" +
    "\005\010\006\030\014\035\016\004\017\033\032\014\033" +
    "\027\036\022\040\046\050\041\052\036\055\042\001\002" +
    "\000\032\005\010\006\030\014\035\016\004\017\033\032" +
    "\014\033\027\036\022\040\046\050\041\052\036\055\042" +
    "\001\002\000\032\005\010\006\030\014\035\016\004\017" +
    "\033\032\014\033\027\036\022\040\046\050\041\052\036" +
    "\055\042\001\002\000\032\005\010\006\030\014\035\016" +
    "\004\017\033\032\014\033\027\036\022\040\046\050\041" +
    "\052\036\055\042\001\002\000\004\040\073\001\002\000" +
    "\032\005\010\006\030\014\035\016\004\017\033\032\014" +
    "\033\027\036\022\040\046\050\041\052\036\055\042\001" +
    "\002\000\034\005\010\006\030\014\035\015\063\016\004" +
    "\017\033\032\014\033\027\036\022\040\046\050\041\052" +
    "\036\055\042\001\002\000\032\005\010\006\030\014\035" +
    "\016\004\017\033\032\014\033\027\036\022\040\046\050" +
    "\041\052\036\055\042\001\002\000\074\002\uffce\004\uffce" +
    "\005\054\006\050\010\052\011\055\012\051\013\053\014" +
    "\060\015\uffce\016\uffce\017\uffce\020\uffce\032\uffce\033\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\045\uffce\050" +
    "\057\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce" +
    "\060\uffce\001\002\000\074\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\032\uffcd\033\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\045\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd\001" +
    "\002\000\070\002\ufff1\004\ufff1\005\054\006\050\010\052" +
    "\011\055\012\051\013\053\014\060\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\032\ufff1\033\ufff1\036\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\045\ufff1\050\057\051\ufff1\052\ufff1\054\061\055" +
    "\ufff1\057\ufff1\060\056\001\002\000\006\015\067\020\066" +
    "\001\002\000\032\005\010\006\030\014\035\016\004\017" +
    "\033\032\014\033\027\036\022\040\046\050\041\052\036" +
    "\055\042\001\002\000\074\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\032\uffcc\033\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\045\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\001" +
    "\002\000\070\002\ufff2\004\ufff2\005\054\006\050\010\052" +
    "\011\055\012\051\013\053\014\060\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\032\ufff2\033\ufff2\036\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\045\ufff2\050\057\051\ufff2\052\ufff2\054\061\055" +
    "\ufff2\057\ufff2\060\056\001\002\000\030\005\054\006\050" +
    "\010\052\011\055\012\051\013\053\014\060\050\057\051" +
    "\072\054\061\060\056\001\002\000\076\002\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\032\uffb5\033\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\045" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\057\uffb5\060\uffb5\001\002\000\074\002\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\032\uffc9\033\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\045\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\060" +
    "\uffc9\001\002\000\074\002\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\010\uffdb\011\uffdb\012\051\013\uffdb\014\060\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\045\uffdb\050\057\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\001\002" +
    "\000\074\002\uffde\004\uffde\005\uffde\006\uffde\010\052\011" +
    "\055\012\051\013\053\014\060\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\032\uffde\033\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\045\uffde\050\057\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\057\uffde\060\uffde\001\002\000\074\002" +
    "\uffda\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda\012\051" +
    "\013\uffda\014\060\015\uffda\016\uffda\017\uffda\020\uffda\032" +
    "\uffda\033\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\045\uffda\050\057\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\057\uffda\060\uffda\001\002\000\074\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\051\013\uffdc\014" +
    "\060\015\uffdc\016\uffdc\017\uffdc\020\uffdc\032\uffdc\033\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\045\uffdc\050" +
    "\057\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\074\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\060\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\032\uffd9\033\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\045\uffd9\050\057\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001" +
    "\002\000\074\002\uffdd\004\uffdd\005\uffdd\006\uffdd\010\052" +
    "\011\055\012\051\013\053\014\060\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\045\uffdd\050\057\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\001\002\000\004" +
    "\037\106\001\002\000\004\040\104\001\002\000\010\015" +
    "\uffb1\020\103\037\uffb1\001\002\000\006\015\uffb2\037\uffb2" +
    "\001\002\000\032\005\010\006\030\014\035\016\004\017" +
    "\033\032\014\033\027\036\022\040\046\050\041\052\036" +
    "\055\042\001\002\000\074\002\uffca\004\uffca\005\054\006" +
    "\050\010\052\011\055\012\051\013\053\014\060\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\032\uffca\033\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\045\uffca\050\057\051\uffca" +
    "\052\uffca\053\uffca\054\061\055\uffca\057\uffca\060\056\001" +
    "\002\000\006\020\066\051\111\001\002\000\074\002\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\032\uffd1" +
    "\033\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\045" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\057\uffd1\060\uffd1\001\002\000\032\005\010\006\030\014" +
    "\035\016\004\017\033\032\014\033\027\036\022\040\046" +
    "\050\041\052\036\055\042\001\002\000\062\002\ufff4\004" +
    "\ufff4\005\054\006\050\010\052\011\055\012\051\013\053" +
    "\014\060\016\ufff4\017\ufff4\032\ufff4\033\ufff4\036\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\045\ufff4\050\057\052\ufff4\054\061" +
    "\055\ufff4\057\ufff4\060\056\001\002\000\040\004\031\005" +
    "\010\006\030\014\035\016\004\017\033\032\014\033\027" +
    "\036\022\040\013\042\016\050\041\052\036\055\042\057" +
    "\012\001\002\000\004\041\uffc1\001\002\000\004\002\uffff" +
    "\001\002\000\042\002\ufff9\004\031\005\010\006\030\014" +
    "\035\016\004\017\033\032\014\033\027\036\022\040\013" +
    "\042\016\050\041\052\036\055\042\057\012\001\002\000" +
    "\004\002\ufffa\001\002\000\006\041\uffbf\045\114\001\002" +
    "\000\004\041\uffc0\001\002\000\030\005\054\006\050\010" +
    "\052\011\055\012\051\013\053\014\060\037\132\050\057" +
    "\054\061\060\056\001\002\000\006\020\125\053\uffb6\001" +
    "\002\000\032\005\010\006\030\014\035\016\004\017\033" +
    "\032\014\033\027\036\022\040\046\050\041\052\036\055" +
    "\042\001\002\000\004\053\127\001\002\000\074\002\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\032\uffd0" +
    "\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\045" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\057\uffd0\060\uffd0\001\002\000\006\020\125\053\uffb6\001" +
    "\002\000\004\053\uffb7\001\002\000\032\005\010\006\030" +
    "\014\035\016\004\017\033\032\014\033\027\036\022\040" +
    "\046\050\041\052\036\055\042\001\002\000\032\005\054" +
    "\006\050\010\052\011\055\012\051\013\053\014\060\020" +
    "\uffb8\050\057\053\uffb8\054\061\060\056\001\002\000\030" +
    "\005\054\006\050\010\052\011\055\012\051\013\053\014" +
    "\060\015\135\050\057\054\061\060\056\001\002\000\074" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\032\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\045\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\057\uffd7\060\uffd7\001\002\000\050\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\014\ufff8\016\ufff8\017\ufff8\020\066" +
    "\032\ufff8\033\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\045" +
    "\ufff8\050\ufff8\052\ufff8\055\ufff8\057\ufff8\001\002\000\074" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012" +
    "\051\013\uffe0\014\060\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\032\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\045\uffe0\050\057\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\057\uffe0\060\uffe0\001\002\000\004\002\ufffd\001" +
    "\002\000\006\041\uffbf\045\114\001\002\000\004\014\143" +
    "\001\002\000\006\015\144\040\145\001\002\000\004\037" +
    "\163\001\002\000\006\015\uffb1\020\103\001\002\000\004" +
    "\015\147\001\002\000\004\037\150\001\002\000\042\004" +
    "\031\005\010\006\030\014\035\016\004\017\033\032\014" +
    "\033\027\036\022\040\013\041\152\042\016\050\041\052" +
    "\036\055\042\057\012\001\002\000\004\041\162\001\002" +
    "\000\004\046\154\001\002\000\056\002\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\014\uffc4\016\uffc4\017\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\047" +
    "\uffc4\050\uffc4\052\uffc4\055\uffc4\056\uffc4\057\uffc4\061\uffc4" +
    "\001\002\000\050\004\031\005\010\006\030\014\035\016" +
    "\004\017\033\032\014\033\027\034\015\036\022\040\013" +
    "\042\016\044\011\050\041\052\036\055\042\056\025\057" +
    "\012\061\006\001\002\000\052\004\031\005\010\006\030" +
    "\014\035\016\004\017\033\032\014\033\027\034\015\036" +
    "\022\040\013\042\016\044\011\047\uffb9\050\041\052\036" +
    "\055\042\056\025\057\012\061\006\001\002\000\052\004" +
    "\031\005\010\006\030\014\035\016\004\017\033\032\014" +
    "\033\027\034\015\036\022\040\013\042\016\044\011\047" +
    "\uffb9\050\041\052\036\055\042\056\025\057\012\061\006" +
    "\001\002\000\004\047\160\001\002\000\060\002\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\014\uffbb\016\uffbb\017\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\044\uffbb\047\uffbb\050\uffbb\052\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\061\uffbb\001\002\000\004\047\uffba\001\002\000" +
    "\060\002\uffbc\004\uffbc\005\uffbc\006\uffbc\014\uffbc\016\uffbc" +
    "\017\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\044\uffbc\047\uffbc\050\uffbc\052\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\061\uffbc\001\002\000\042\004" +
    "\031\005\010\006\030\014\035\016\004\017\033\032\014" +
    "\033\027\036\022\040\013\041\152\042\016\050\041\052" +
    "\036\055\042\057\012\001\002\000\056\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\014\uffc5\016\uffc5\017\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\047\uffc5\050\uffc5\052\uffc5\055\uffc5\056\uffc5\057\uffc5\061" +
    "\uffc5\001\002\000\004\040\166\001\002\000\064\002\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\032\uffc9\033\uffc9\036\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffb3\045\uffc9\050\uffc9\052" +
    "\uffc9\054\uffc9\055\uffc9\057\uffc9\060\uffc9\001\002\000\056" +
    "\002\uffbe\004\uffbe\005\uffbe\006\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\044\uffbe\047\uffbe\050\uffbe\052\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\061\uffbe\001\002\000\004\002\000\001\002" +
    "\000\030\005\054\006\050\010\052\011\055\012\051\013" +
    "\053\014\060\037\172\050\057\054\061\060\056\001\002" +
    "\000\042\004\031\005\010\006\030\014\035\016\004\017" +
    "\033\032\014\033\027\036\022\040\013\041\152\042\016" +
    "\050\041\052\036\055\042\057\012\001\002\000\060\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\174\036\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\044\uffc7\047\uffc7\050\uffc7\052\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\001\002\000\004\037\175\001" +
    "\002\000\042\004\031\005\010\006\030\014\035\016\004" +
    "\017\033\032\014\033\027\036\022\040\013\041\152\042" +
    "\016\050\041\052\036\055\042\057\012\001\002\000\056" +
    "\002\uffc8\004\uffc8\005\uffc8\006\uffc8\014\uffc8\016\uffc8\017" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\044\uffc8\047\uffc8\050\uffc8\052\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\061\uffc8\001\002\000\032\005\010\006\030" +
    "\014\035\016\004\017\033\032\014\033\027\036\022\040" +
    "\046\050\041\052\036\055\042\001\002\000\062\002\ufff6" +
    "\004\ufff6\005\054\006\050\010\052\011\055\012\051\013" +
    "\053\014\060\016\ufff6\017\ufff6\032\ufff6\033\ufff6\036\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\045\ufff6\050\057\052\ufff6\054" +
    "\061\055\ufff6\057\ufff6\060\056\001\002\000\062\002\ufff3" +
    "\004\ufff3\005\054\006\050\010\052\011\055\012\051\013" +
    "\053\014\060\016\ufff3\017\ufff3\032\ufff3\033\ufff3\036\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\045\ufff3\050\057\052\ufff3\054" +
    "\061\055\ufff3\057\ufff3\060\056\001\002\000\030\005\054" +
    "\006\050\010\052\011\055\012\051\013\053\014\060\037" +
    "\203\050\057\054\061\060\056\001\002\000\042\004\031" +
    "\005\010\006\030\014\035\016\004\017\033\032\014\033" +
    "\027\036\022\040\013\041\152\042\016\050\041\052\036" +
    "\055\042\057\012\001\002\000\056\002\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\014\uffc6\016\uffc6\017\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\047" +
    "\uffc6\050\uffc6\052\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6" +
    "\001\002\000\074\002\uffdf\004\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\012\051\013\uffdf\014\060\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\032\uffdf\033\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\045\uffdf\050\057\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\001\002\000" +
    "\004\002\ufffc\001\002\000\006\014\210\037\211\001\002" +
    "\000\032\005\010\006\030\014\035\016\004\017\033\032" +
    "\014\033\027\036\022\040\046\050\041\052\036\055\042" +
    "\001\002\000\042\004\031\005\010\006\030\014\035\016" +
    "\004\017\033\032\014\033\027\036\022\040\013\041\152" +
    "\042\016\050\041\052\036\055\042\057\012\001\002\000" +
    "\056\002\uffc3\004\uffc3\005\uffc3\006\uffc3\014\uffc3\016\uffc3" +
    "\017\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\044\uffc3\047\uffc3\050\uffc3\052\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\061\uffc3\001\002\000\006\015\uffb0\020" +
    "\066\001\002\000\004\015\215\001\002\000\004\037\216" +
    "\001\002\000\042\004\031\005\010\006\030\014\035\016" +
    "\004\017\033\032\014\033\027\036\022\040\013\041\152" +
    "\042\016\050\041\052\036\055\042\057\012\001\002\000" +
    "\056\002\uffc2\004\uffc2\005\uffc2\006\uffc2\014\uffc2\016\uffc2" +
    "\017\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\044\uffc2\047\uffc2\050\uffc2\052\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\061\uffc2\001\002\000\004\015\221\001" +
    "\002\000\074\002\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\045\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\030\002\017\003\004\004\036\006\022\012" +
    "\016\013\020\015\006\020\033\023\031\024\037\027\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\140\006\022\012\016\013\020\015\006" +
    "\020\205\023\031\024\037\027\023\001\001\000\010\006" +
    "\204\023\046\027\023\001\001\000\010\006\201\023\046" +
    "\027\023\001\001\000\010\006\200\023\046\027\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\170" +
    "\023\046\027\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\140\006\022\012\016\013\020\015\006\020\137" +
    "\023\031\024\037\027\023\001\001\000\002\001\001\000" +
    "\010\006\136\023\046\027\023\001\001\000\012\006\063" +
    "\007\135\023\046\027\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\133\023\046" +
    "\027\023\001\001\000\012\006\122\021\123\023\046\027" +
    "\023\001\001\000\020\004\116\005\115\006\022\014\114" +
    "\023\031\024\037\027\023\001\001\000\002\001\001\000" +
    "\012\006\063\007\107\023\046\027\023\001\001\000\002" +
    "\001\001\000\004\025\101\001\001\000\010\006\044\023" +
    "\046\027\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\100\023\046\027\023\001" +
    "\001\000\010\006\077\023\046\027\023\001\001\000\010" +
    "\006\076\023\046\027\023\001\001\000\010\006\075\023" +
    "\046\027\023\001\001\000\010\006\074\023\046\027\023" +
    "\001\001\000\010\006\073\023\046\027\023\001\001\000" +
    "\002\001\001\000\010\006\070\023\046\027\023\001\001" +
    "\000\012\006\063\007\064\023\046\027\023\001\001\000" +
    "\010\006\061\023\046\027\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\067\023\046\027\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\104" +
    "\001\001\000\002\001\001\000\010\006\106\023\046\027" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\112\023\046\027\023\001\001\000" +
    "\002\001\001\000\014\004\120\006\022\023\031\024\037" +
    "\027\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\116\005\117\006\022\023\031\024\037\027\023" +
    "\001\001\000\002\001\001\000\004\014\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\125\001\001" +
    "\000\012\006\122\021\127\023\046\027\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\130\001\001" +
    "\000\002\001\001\000\010\006\132\023\046\027\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\140\006\022\013\150" +
    "\016\152\023\031\024\037\027\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\140" +
    "\006\022\012\016\013\020\015\154\023\031\024\037\027" +
    "\023\001\001\000\024\004\140\006\022\012\016\013\020" +
    "\015\155\017\156\023\031\024\037\027\023\001\001\000" +
    "\024\004\140\006\022\012\016\013\020\015\155\017\160" +
    "\023\031\024\037\027\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\140\006\022\013\150\016\163\023\031\024\037\027" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\140\006\022\013\150\016\172\023\031" +
    "\024\037\027\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\140\006\022\013\150\016\175\023\031" +
    "\024\037\027\023\001\001\000\002\001\001\000\010\006" +
    "\177\023\046\027\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\140\006\022\013" +
    "\150\016\203\023\031\024\037\027\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\063\007\212\023\046\026\213\027\023" +
    "\001\001\000\020\004\140\006\022\013\150\016\211\023" +
    "\031\024\037\027\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\140\006\022\013\150\016\216\023\031\024\037\027\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {



  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_list ::= expression_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // identifier_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // identifier_comma_list ::= COMMA IDENTIFIER identifier_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // target ::= expression FULLSTOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("target",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // target ::= subscription 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("target",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // subscription ::= expression LEFTSQUAREBRACKET expression RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("subscription",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // key_datum_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum_comma_list",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // key_datum_comma_list ::= COMMA key_datum key_datum_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum_comma_list",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // key_datum ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // suite ::= NEWLINE INDENT statement statement_list DEDENT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // suite ::= stmt_list NEWLINE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= stmt_list NEWLINE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = list; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_stmt_semicolon_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<SimpleStatement>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_stmt_semicolon_list ::= SEMICOLON simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<SimpleStatement>)list).add((SimpleStatement)stmt); 
									RESULT = list;
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt_list ::= simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<SimpleStatement>)list).add((SimpleStatement)stmt); 
									RESULT = list;
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compound_statement ::= CLASS IDENTIFIER LEFTPARENTHESE expression_list RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // compound_statement ::= CLASS IDENTIFIER COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compound_statement ::= DEF IDENTIFIER LEFTPARENTHESE IDENTIFIER identifier_comma_list RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // compound_statement ::= DEF IDENTIFIER LEFTPARENTHESE RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // compound_statement ::= WHILE expression COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compound_statement ::= IF expression COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compound_statement ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression FULLSTOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LAMBDA IDENTIFIER identifier_comma_list COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= LAMBDA COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression LEFTPARENTHESE expression_comma_list RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression IS expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= subscription 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= LEFTCURLYBRACKET key_datum key_datum_comma_list RIGHTCURLYBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= LEFTSQUAREBRACKET expression_comma_list RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new FalseExpression(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new TrueExpression(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= FLOAT 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new FloatExpression(((String)value)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= INPUT LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;
		 RESULT = new InputExpression(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ParenthesesExpression((Expression)expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = expr; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithmetic_expression ::= expression POW expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.pow, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithmetic_expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.mod, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.div, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.mult, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.sub, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithmetic_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) expr1, BinaryOperators.add, (Expression) expr2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithmetic_expression ::= PLUS expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.add, (Expression) expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arithmetic_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.sub, (Expression) expr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arithmetic_expression ::= INTEGER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IntegerExpression((String)value); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binary_op ::= AND 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.and; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binary_op ::= OR 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.or; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_op ::= NOTEQUAL 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.notequal; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_op ::= LESSOREQUAL 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.lessorequal; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_op ::= GREATEROREQUAL 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.greaterorequal; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_op ::= EQUAL 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.equal; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binary_op ::= GREATER 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.greater; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binary_op ::= LESS 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.less; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binary_op ::= POW 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.pow; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binary_op ::= MOD 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.mod; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binary_op ::= DIV 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.div; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binary_op ::= MULT 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.mult; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binary_op ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.sub; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binary_op ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = BinaryOperators.add; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_op ::= NOT 
            {
              Object RESULT =null;
		 RESULT = UnaryOperators.not; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_comma_list ::= expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 List<Expression> list = new LinkedList<Expression>();
									   list.add((Expression)expr);
									   System.out.println("TU jestem!");
									   RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_comma_list ::= expression_comma_list COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<Expression>)list).add((Expression)expr); 
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_statement ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_statement ::= target ASSIGN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_statement ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_statement ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_statement ::= PASS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_statement ::= PRINT expression_comma_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
										RESULT = new PrintStatement((List<Expression>)list); 
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_statement_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<SimpleStatement>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_statement_list ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<SimpleStatement>)list).add((SimpleStatement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_newline_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<SimpleStatement>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_newline_list ::= statement statement_newline_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			((List<SimpleStatement>)list).addAll((List<SimpleStatement>)stmt);
									RESULT = list;
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_newline_list ::= NEWLINE statement_newline_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			RESULT = list; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= statement_newline_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((List<SimpleStatement>)list).add((SimpleStatement)stmt);
										RESULT = list;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	Collections.reverse((List<SimpleStatement>)list);
									RESULT = new Program((List<SimpleStatement>)list);
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

