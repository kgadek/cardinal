
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 14 18:43:50 CEST 2012
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 14 18:43:50 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\002\000\002\005\004\000\002\005\002\000" +
    "\002\004\005\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\007" +
    "\005\000\002\007\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\006\000\002\006\006" +
    "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\007\000\002\006\005\000\002\006\007\000\002" +
    "\012\011\000\002\012\006\000\002\012\006\000\002\012" +
    "\010\000\002\012\012\000\002\013\004\000\002\014\005" +
    "\000\002\014\002\000\002\015\004\000\002\015\003\000" +
    "\002\016\004\000\002\016\007\000\002\017\004\000\002" +
    "\017\002\000\002\021\005\000\002\022\005\000\002\022" +
    "\002\000\002\023\006\000\002\024\003\000\002\025\005" +
    "\000\002\025\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\054\002\ufffb\004\030\005\007\006\025\014" +
    "\034\016\004\017\031\021\011\032\014\033\027\034\016" +
    "\036\022\040\013\041\026\042\015\044\010\050\041\052" +
    "\035\055\042\056\024\057\012\001\002\000\004\014\211" +
    "\001\002\000\004\002\001\001\002\000\054\002\ufffb\004" +
    "\030\005\007\006\025\014\034\016\004\017\031\021\011" +
    "\032\014\033\027\034\016\036\022\040\013\041\026\042" +
    "\015\044\010\050\041\052\035\055\042\056\024\057\012" +
    "\001\002\000\034\005\ufff0\006\ufff0\014\ufff0\016\ufff0\017" +
    "\ufff0\021\ufff0\032\ufff0\033\ufff0\036\ufff0\040\ufff0\050\ufff0" +
    "\052\ufff0\055\ufff0\001\002\000\034\005\007\006\025\014" +
    "\034\016\004\017\031\021\011\032\014\033\027\036\022" +
    "\040\046\050\041\052\035\055\042\001\002\000\034\005" +
    "\uffee\006\uffee\014\uffee\016\uffee\017\uffee\021\uffee\032\uffee" +
    "\033\uffee\036\uffee\040\uffee\050\uffee\052\uffee\055\uffee\001" +
    "\002\000\034\005\007\006\025\014\034\016\004\017\031" +
    "\021\011\032\014\033\027\036\022\040\046\050\041\052" +
    "\035\055\042\001\002\000\104\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\202\045\uffd7\050\uffd7" +
    "\052\uffd7\054\uffd7\055\uffd7\057\uffd7\001\002\000\114\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\057\uffd9\001\002\000\050\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\014\ufff7\016\ufff7\017\ufff7" +
    "\021\ufff7\032\ufff7\033\ufff7\036\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\045\ufff7\050\ufff7\052\ufff7\055\ufff7\057\ufff7\001\002" +
    "\000\034\005\007\006\025\014\034\016\004\017\031\021" +
    "\011\032\014\033\027\036\022\040\046\050\041\052\035" +
    "\055\042\001\002\000\056\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\047" +
    "\uffc5\050\uffc5\052\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002" +
    "\000\004\002\173\001\002\000\004\041\172\001\002\000" +
    "\114\002\uffda\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\045\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\057\uffda\001\002\000" +
    "\102\002\ufff5\004\ufff5\005\054\006\066\010\063\011\065" +
    "\012\060\013\050\014\067\016\ufff5\017\ufff5\021\ufff5\022" +
    "\070\023\061\024\056\025\064\026\062\027\057\030\055" +
    "\031\051\032\ufff5\033\ufff5\036\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\045\ufff5\050\071\052\ufff5\054\052\055\ufff5\057\ufff5" +
    "\001\002\000\004\040\147\001\002\000\034\005\uffef\006" +
    "\uffef\014\uffef\016\uffef\017\uffef\021\uffef\032\uffef\033\uffef" +
    "\036\uffef\040\uffef\050\uffef\052\uffef\055\uffef\001\002\000" +
    "\054\002\ufffb\004\030\005\007\006\025\014\034\016\004" +
    "\017\031\021\011\032\014\033\027\034\016\036\022\040" +
    "\013\041\026\042\015\044\010\050\041\052\035\055\042" +
    "\056\024\057\012\001\002\000\114\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\057\uffd8\001\002\000\034\005\007\006\025\014" +
    "\034\016\004\017\031\021\011\032\014\033\027\036\022" +
    "\040\046\050\041\052\035\055\042\001\002\000\114\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\045\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\057\uffdf\001\002\000\104\002" +
    "\uffd4\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffbc\045\uffd4\050\uffd4\052\uffd4\054\uffd4\055\uffd4\057\uffd4" +
    "\001\002\000\004\002\ufffe\001\002\000\034\005\007\006" +
    "\025\014\034\016\004\017\031\021\011\032\014\033\027" +
    "\036\022\040\046\050\041\052\035\055\042\001\002\000" +
    "\034\005\007\006\025\014\034\016\004\017\031\021\011" +
    "\032\014\033\027\036\022\040\046\050\041\052\035\055" +
    "\042\001\002\000\050\002\ufff9\004\030\005\007\006\025" +
    "\014\034\016\004\017\031\021\011\032\014\033\027\036" +
    "\022\040\013\041\uffc7\042\015\045\121\050\041\052\035" +
    "\055\042\057\012\001\002\000\004\043\117\001\002\000" +
    "\034\005\007\006\025\014\034\016\004\017\031\021\011" +
    "\032\014\033\027\036\022\040\046\050\041\052\035\055" +
    "\042\001\002\000\034\005\007\006\025\014\034\016\004" +
    "\017\031\021\011\032\014\033\027\036\022\040\046\050" +
    "\041\052\035\055\042\001\002\000\006\037\044\040\043" +
    "\001\002\000\006\020\106\037\uffba\001\002\000\034\005" +
    "\007\006\025\014\034\016\004\017\031\021\011\032\014" +
    "\033\027\036\022\040\046\050\041\052\035\055\042\001" +
    "\002\000\114\002\uffd0\004\uffd0\005\054\006\066\010\063" +
    "\011\065\012\060\013\050\014\067\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\070\023\061\024\056\025\064" +
    "\026\062\027\057\030\055\031\051\032\uffd0\033\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\045\uffd0\050\071" +
    "\051\uffd0\052\uffd0\053\uffd0\054\052\055\uffd0\057\uffd0\001" +
    "\002\000\114\002\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\045\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\001" +
    "\002\000\114\002\uffd4\004\uffd4\005\uffd4\006\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\045\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\001" +
    "\002\000\034\005\uffe9\006\uffe9\014\uffe9\016\uffe9\017\uffe9" +
    "\021\uffe9\032\uffe9\033\uffe9\036\uffe9\040\uffe9\050\uffe9\052" +
    "\uffe9\055\uffe9\001\002\000\034\005\uffe0\006\uffe0\014\uffe0" +
    "\016\uffe0\017\uffe0\021\uffe0\032\uffe0\033\uffe0\036\uffe0\040" +
    "\uffe0\050\uffe0\052\uffe0\055\uffe0\001\002\000\034\005\007" +
    "\006\025\014\034\016\004\017\031\021\011\032\014\033" +
    "\027\036\022\040\046\050\041\052\035\055\042\001\002" +
    "\000\034\005\007\006\025\014\034\016\004\017\031\021" +
    "\011\032\014\033\027\036\022\040\046\050\041\052\035" +
    "\055\042\001\002\000\034\005\uffed\006\uffed\014\uffed\016" +
    "\uffed\017\uffed\021\uffed\032\uffed\033\uffed\036\uffed\040\uffed" +
    "\050\uffed\052\uffed\055\uffed\001\002\000\034\005\uffe1\006" +
    "\uffe1\014\uffe1\016\uffe1\017\uffe1\021\uffe1\032\uffe1\033\uffe1" +
    "\036\uffe1\040\uffe1\050\uffe1\052\uffe1\055\uffe1\001\002\000" +
    "\034\005\uffe5\006\uffe5\014\uffe5\016\uffe5\017\uffe5\021\uffe5" +
    "\032\uffe5\033\uffe5\036\uffe5\040\uffe5\050\uffe5\052\uffe5\055" +
    "\uffe5\001\002\000\034\005\uffe2\006\uffe2\014\uffe2\016\uffe2" +
    "\017\uffe2\021\uffe2\032\uffe2\033\uffe2\036\uffe2\040\uffe2\050" +
    "\uffe2\052\uffe2\055\uffe2\001\002\000\034\005\uffe8\006\uffe8" +
    "\014\uffe8\016\uffe8\017\uffe8\021\uffe8\032\uffe8\033\uffe8\036" +
    "\uffe8\040\uffe8\050\uffe8\052\uffe8\055\uffe8\001\002\000\034" +
    "\005\uffe6\006\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6\032" +
    "\uffe6\033\uffe6\036\uffe6\040\uffe6\050\uffe6\052\uffe6\055\uffe6" +
    "\001\002\000\034\005\uffe3\006\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\032\uffe3\033\uffe3\036\uffe3\040\uffe3\050\uffe3" +
    "\052\uffe3\055\uffe3\001\002\000\034\005\uffeb\006\uffeb\014" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\032\uffeb\033\uffeb\036\uffeb" +
    "\040\uffeb\050\uffeb\052\uffeb\055\uffeb\001\002\000\034\005" +
    "\uffe4\006\uffe4\014\uffe4\016\uffe4\017\uffe4\021\uffe4\032\uffe4" +
    "\033\uffe4\036\uffe4\040\uffe4\050\uffe4\052\uffe4\055\uffe4\001" +
    "\002\000\034\005\uffea\006\uffea\014\uffea\016\uffea\017\uffea" +
    "\021\uffea\032\uffea\033\uffea\036\uffea\040\uffea\050\uffea\052" +
    "\uffea\055\uffea\001\002\000\034\005\uffec\006\uffec\014\uffec" +
    "\016\uffec\017\uffec\021\uffec\032\uffec\033\uffec\036\uffec\040" +
    "\uffec\050\uffec\052\uffec\055\uffec\001\002\000\036\005\007" +
    "\006\025\014\034\015\074\016\004\017\031\021\011\032" +
    "\014\033\027\036\022\040\046\050\041\052\035\055\042" +
    "\001\002\000\034\005\uffe7\006\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\032\uffe7\033\uffe7\036\uffe7\040\uffe7\050\uffe7" +
    "\052\uffe7\055\uffe7\001\002\000\034\005\007\006\025\014" +
    "\034\016\004\017\031\021\011\032\014\033\027\036\022" +
    "\040\046\050\041\052\035\055\042\001\002\000\046\005" +
    "\054\006\066\010\063\011\065\012\060\013\050\014\067" +
    "\022\070\023\061\024\056\025\064\026\062\027\057\030" +
    "\055\031\051\050\071\051\073\054\052\001\002\000\116" +
    "\002\uffbd\004\uffbd\005\uffbd\006\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\001\002" +
    "\000\114\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\045\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\001\002" +
    "\000\050\005\054\006\066\010\063\011\065\012\060\013" +
    "\050\014\067\015\ufff1\020\076\022\070\023\061\024\056" +
    "\025\064\026\062\027\057\030\055\031\051\050\071\054" +
    "\052\001\002\000\034\005\007\006\025\014\034\016\004" +
    "\017\031\021\011\032\014\033\027\036\022\040\046\050" +
    "\041\052\035\055\042\001\002\000\004\015\100\001\002" +
    "\000\114\002\uffd1\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\045\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\001\002" +
    "\000\110\002\ufff1\004\ufff1\005\054\006\066\010\063\011" +
    "\065\012\060\013\050\014\067\015\ufff1\016\ufff1\017\ufff1" +
    "\020\076\021\ufff1\022\070\023\061\024\056\025\064\026" +
    "\062\027\057\030\055\031\051\032\ufff1\033\ufff1\036\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\045\ufff1\050\071\051\ufff1\052" +
    "\ufff1\054\052\055\ufff1\057\ufff1\001\002\000\054\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\021\ufff2\032\ufff2\033\ufff2\036\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\045\ufff2\050\ufff2\051\ufff2\052\ufff2\055\ufff2\057" +
    "\ufff2\001\002\000\114\002\uffdd\004\uffdd\005\054\006\066" +
    "\010\063\011\065\012\060\013\050\014\067\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\070\023\061\024\056" +
    "\025\064\026\062\027\057\030\055\031\051\032\uffdd\033" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\045\uffdd" +
    "\050\071\051\uffdd\052\uffdd\053\uffdd\054\052\055\uffdd\057" +
    "\uffdd\001\002\000\114\002\uffd3\004\uffd3\005\054\006\066" +
    "\010\063\011\065\012\060\013\050\014\067\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\045\uffd3" +
    "\050\071\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057" +
    "\uffd3\001\002\000\004\037\111\001\002\000\004\040\107" +
    "\001\002\000\010\015\uffba\020\106\037\uffba\001\002\000" +
    "\006\015\uffbb\037\uffbb\001\002\000\034\005\007\006\025" +
    "\014\034\016\004\017\031\021\011\032\014\033\027\036" +
    "\022\040\046\050\041\052\035\055\042\001\002\000\114" +
    "\002\uffcf\004\uffcf\005\054\006\066\010\063\011\065\012" +
    "\060\013\050\014\067\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\070\023\061\024\056\025\064\026\062\027" +
    "\057\030\055\031\051\032\uffcf\033\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\045\uffcf\050\071\051\uffcf\052" +
    "\uffcf\053\uffcf\054\052\055\uffcf\057\uffcf\001\002\000\050" +
    "\005\054\006\066\010\063\011\065\012\060\013\050\014" +
    "\067\020\076\022\070\023\061\024\056\025\064\026\062" +
    "\027\057\030\055\031\051\050\071\051\ufff1\054\052\001" +
    "\002\000\004\051\115\001\002\000\114\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\045\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\057\uffd6\001\002\000\114\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\010\uffde\011\uffde\012\060\013\uffde\014" +
    "\067\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\045\uffde\050\071\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\057\uffde\001\002\000\034\005\007\006\025" +
    "\014\034\016\004\017\031\021\011\032\014\033\027\036" +
    "\022\040\046\050\041\052\035\055\042\001\002\000\102" +
    "\002\ufff4\004\ufff4\005\054\006\066\010\063\011\065\012" +
    "\060\013\050\014\067\016\ufff4\017\ufff4\021\ufff4\022\070" +
    "\023\061\024\056\025\064\026\062\027\057\030\055\031" +
    "\051\032\ufff4\033\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\045\ufff4\050\071\052\ufff4\054\052\055\ufff4\057\ufff4\001" +
    "\002\000\042\004\030\005\007\006\025\014\034\016\004" +
    "\017\031\021\011\032\014\033\027\036\022\040\013\042" +
    "\015\050\041\052\035\055\042\057\012\001\002\000\004" +
    "\041\uffc9\001\002\000\044\002\ufff9\004\030\005\007\006" +
    "\025\014\034\016\004\017\031\021\011\032\014\033\027" +
    "\036\022\040\013\042\015\050\041\052\035\055\042\057" +
    "\012\001\002\000\004\002\uffff\001\002\000\004\002\ufffa" +
    "\001\002\000\006\041\uffc7\045\121\001\002\000\004\041" +
    "\uffc8\001\002\000\046\005\054\006\066\010\063\011\065" +
    "\012\060\013\050\014\067\022\070\023\061\024\056\025" +
    "\064\026\062\027\057\030\055\031\051\037\137\050\071" +
    "\054\052\001\002\000\006\020\132\053\uffbe\001\002\000" +
    "\034\005\007\006\025\014\034\016\004\017\031\021\011" +
    "\032\014\033\027\036\022\040\046\050\041\052\035\055" +
    "\042\001\002\000\004\053\134\001\002\000\114\002\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\045\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\057\uffd5\001\002\000\006\020\132" +
    "\053\uffbe\001\002\000\004\053\uffbf\001\002\000\034\005" +
    "\007\006\025\014\034\016\004\017\031\021\011\032\014" +
    "\033\027\036\022\040\046\050\041\052\035\055\042\001" +
    "\002\000\050\005\054\006\066\010\063\011\065\012\060" +
    "\013\050\014\067\020\uffc0\022\070\023\061\024\056\025" +
    "\064\026\062\027\057\030\055\031\051\050\071\053\uffc0" +
    "\054\052\001\002\000\046\005\054\006\066\010\063\011" +
    "\065\012\060\013\050\014\067\015\142\022\070\023\061" +
    "\024\056\025\064\026\062\027\057\030\055\031\051\050" +
    "\071\054\052\001\002\000\114\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\045\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\057\uffdc\001\002\000\104\002\ufff1\004\ufff1\005\054" +
    "\006\066\010\063\011\065\012\060\013\050\014\067\016" +
    "\ufff1\017\ufff1\020\076\021\ufff1\022\070\023\061\024\056" +
    "\025\064\026\062\027\057\030\055\031\051\032\ufff1\033" +
    "\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\045\ufff1\050\071" +
    "\052\ufff1\054\052\055\ufff1\057\ufff1\001\002\000\050\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\021\ufff8\032\ufff8\033\ufff8\036\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\045\ufff8\050\ufff8\052\ufff8\055\ufff8\057\ufff8\001\002" +
    "\000\004\002\ufffd\001\002\000\006\041\uffc7\045\121\001" +
    "\002\000\004\014\150\001\002\000\006\015\151\040\152" +
    "\001\002\000\004\037\170\001\002\000\006\015\uffba\020" +
    "\106\001\002\000\004\015\154\001\002\000\004\037\155" +
    "\001\002\000\044\004\030\005\007\006\025\014\034\016" +
    "\004\017\031\021\011\032\014\033\027\036\022\040\013" +
    "\041\157\042\015\050\041\052\035\055\042\057\012\001" +
    "\002\000\004\041\167\001\002\000\004\046\161\001\002" +
    "\000\056\002\uffca\004\uffca\005\uffca\006\uffca\014\uffca\016" +
    "\uffca\017\uffca\021\uffca\032\uffca\033\uffca\034\uffca\036\uffca" +
    "\040\uffca\041\uffca\042\uffca\044\uffca\047\uffca\050\uffca\052" +
    "\uffca\055\uffca\056\uffca\057\uffca\001\002\000\050\004\030" +
    "\005\007\006\025\014\034\016\004\017\031\021\011\032" +
    "\014\033\027\034\016\036\022\040\013\042\015\044\010" +
    "\050\041\052\035\055\042\056\024\057\012\001\002\000" +
    "\052\004\030\005\007\006\025\014\034\016\004\017\031" +
    "\021\011\032\014\033\027\034\016\036\022\040\013\042" +
    "\015\044\010\047\uffc1\050\041\052\035\055\042\056\024" +
    "\057\012\001\002\000\052\004\030\005\007\006\025\014" +
    "\034\016\004\017\031\021\011\032\014\033\027\034\016" +
    "\036\022\040\013\042\015\044\010\047\uffc1\050\041\052" +
    "\035\055\042\056\024\057\012\001\002\000\004\047\165" +
    "\001\002\000\060\002\uffc3\004\uffc3\005\uffc3\006\uffc3\014" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\047" +
    "\uffc3\050\uffc3\052\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002" +
    "\000\004\047\uffc2\001\002\000\060\002\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\014\uffc4\016\uffc4\017\uffc4\021\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\044\uffc4\047\uffc4\050\uffc4\052\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\001\002\000\044\004\030\005\007\006\025\014" +
    "\034\016\004\017\031\021\011\032\014\033\027\036\022" +
    "\040\013\041\157\042\015\050\041\052\035\055\042\057" +
    "\012\001\002\000\056\002\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\021\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\047\uffcb" +
    "\050\uffcb\052\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000" +
    "\056\002\uffc6\004\uffc6\005\uffc6\006\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\021\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\044\uffc6\047\uffc6\050\uffc6\052\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\001\002\000\004\002\000\001" +
    "\002\000\046\005\054\006\066\010\063\011\065\012\060" +
    "\013\050\014\067\022\070\023\061\024\056\025\064\026" +
    "\062\027\057\030\055\031\051\037\175\050\071\054\052" +
    "\001\002\000\044\004\030\005\007\006\025\014\034\016" +
    "\004\017\031\021\011\032\014\033\027\036\022\040\013" +
    "\041\157\042\015\050\041\052\035\055\042\057\012\001" +
    "\002\000\060\002\uffcd\004\uffcd\005\uffcd\006\uffcd\014\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\177\036\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\047\uffcd" +
    "\050\uffcd\052\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002\000" +
    "\004\037\200\001\002\000\044\004\030\005\007\006\025" +
    "\014\034\016\004\017\031\021\011\032\014\033\027\036" +
    "\022\040\013\041\157\042\015\050\041\052\035\055\042" +
    "\057\012\001\002\000\056\002\uffce\004\uffce\005\uffce\006" +
    "\uffce\014\uffce\016\uffce\017\uffce\021\uffce\032\uffce\033\uffce" +
    "\034\uffce\036\uffce\040\uffce\041\uffce\042\uffce\044\uffce\047" +
    "\uffce\050\uffce\052\uffce\055\uffce\056\uffce\057\uffce\001\002" +
    "\000\034\005\007\006\025\014\034\016\004\017\031\021" +
    "\011\032\014\033\027\036\022\040\046\050\041\052\035" +
    "\055\042\001\002\000\102\002\ufff6\004\ufff6\005\054\006" +
    "\066\010\063\011\065\012\060\013\050\014\067\016\ufff6" +
    "\017\ufff6\021\ufff6\022\070\023\061\024\056\025\064\026" +
    "\062\027\057\030\055\031\051\032\ufff6\033\ufff6\036\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\045\ufff6\050\071\052\ufff6\054" +
    "\052\055\ufff6\057\ufff6\001\002\000\102\002\ufff3\004\ufff3" +
    "\005\054\006\066\010\063\011\065\012\060\013\050\014" +
    "\067\016\ufff3\017\ufff3\021\ufff3\022\070\023\061\024\056" +
    "\025\064\026\062\027\057\030\055\031\051\032\ufff3\033" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3\050\071" +
    "\052\ufff3\054\052\055\ufff3\057\ufff3\001\002\000\046\005" +
    "\054\006\066\010\063\011\065\012\060\013\050\014\067" +
    "\022\070\023\061\024\056\025\064\026\062\027\057\030" +
    "\055\031\051\037\206\050\071\054\052\001\002\000\044" +
    "\004\030\005\007\006\025\014\034\016\004\017\031\021" +
    "\011\032\014\033\027\036\022\040\013\041\157\042\015" +
    "\050\041\052\035\055\042\057\012\001\002\000\056\002" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\044\uffcc\047\uffcc\050\uffcc\052\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\001\002\000\004\002\ufffc\001\002\000" +
    "\004\015\212\001\002\000\114\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\045\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\057\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\030\002\017\003\004\004\035\006\022\010" +
    "\037\012\016\013\020\015\005\020\032\023\031\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\145\006\022\010\037\012\016\013\020\015\005\020\207" +
    "\023\031\024\036\001\001\000\002\001\001\000\010\006" +
    "\204\010\037\023\046\001\001\000\002\001\001\000\010" +
    "\006\203\010\037\023\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\173\010\037" +
    "\023\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\145\006" +
    "\022\010\037\012\016\013\020\015\005\020\144\023\031" +
    "\024\036\001\001\000\002\001\001\000\010\006\142\010" +
    "\037\023\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\140\010\037\023\046\001" +
    "\001\000\012\006\127\010\037\021\130\023\046\001\001" +
    "\000\020\004\122\005\123\006\022\010\037\014\121\023" +
    "\031\024\036\001\001\000\002\001\001\000\010\006\115" +
    "\010\037\023\046\001\001\000\010\006\112\010\037\023" +
    "\046\001\001\000\002\001\001\000\004\025\104\001\001" +
    "\000\010\006\044\010\037\023\046\001\001\000\004\011" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\103\010\037\023" +
    "\046\001\001\000\010\006\102\010\037\023\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\074\010\037\023\046" +
    "\001\001\000\002\001\001\000\010\006\071\010\037\023" +
    "\046\001\001\000\004\011\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\076\011\052\001\001\000" +
    "\010\006\100\010\037\023\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\101\011\052\001\001\000" +
    "\002\001\001\000\004\011\052\001\001\000\004\011\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\107\001\001\000\002\001\001\000\010\006\111\010\037" +
    "\023\046\001\001\000\004\011\052\001\001\000\006\007" +
    "\113\011\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\052\001\001\000\010\006\117\010\037\023" +
    "\046\001\001\000\004\011\052\001\001\000\014\004\125" +
    "\006\022\010\037\023\031\024\036\001\001\000\002\001" +
    "\001\000\016\004\122\005\124\006\022\010\037\023\031" +
    "\024\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\126\001\001\000\002\001\001\000\004\011\052" +
    "\001\001\000\004\022\132\001\001\000\012\006\127\010" +
    "\037\021\134\023\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\135\001\001\000\002\001\001\000" +
    "\010\006\137\010\037\023\046\001\001\000\004\011\052" +
    "\001\001\000\004\011\052\001\001\000\002\001\001\000" +
    "\006\007\143\011\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\145\006" +
    "\022\010\037\013\155\016\157\023\031\024\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\145\006\022\010\037\012\016\013\020\015\161" +
    "\023\031\024\036\001\001\000\024\004\145\006\022\010" +
    "\037\012\016\013\020\015\162\017\163\023\031\024\036" +
    "\001\001\000\024\004\145\006\022\010\037\012\016\013" +
    "\020\015\162\017\165\023\031\024\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\145\006\022\010\037\013\155\016\170" +
    "\023\031\024\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\052\001\001\000\020" +
    "\004\145\006\022\010\037\013\155\016\175\023\031\024" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\145\006\022\010\037\013\155\016\200\023\031\024" +
    "\036\001\001\000\002\001\001\000\010\006\202\010\037" +
    "\023\046\001\001\000\004\011\052\001\001\000\004\011" +
    "\052\001\001\000\004\011\052\001\001\000\020\004\145" +
    "\006\022\010\037\013\155\016\206\023\031\024\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {



  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // identifier_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // identifier_comma_list ::= COMMA IDENTIFIER identifier_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // target ::= subscription 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("target",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subscription ::= expression LEFTSQUAREBRACKET expression RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("subscription",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // key_datum_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum_comma_list",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // key_datum_comma_list ::= COMMA key_datum key_datum_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum_comma_list",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // key_datum ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("key_datum",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // suite ::= NEWLINE INDENT statement statement_list DEDENT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // suite ::= stmt_list NEWLINE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= stmt_list NEWLINE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_stmt_semicolon_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_stmt_semicolon_list ::= SEMICOLON simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt_list ::= simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // compound_statement ::= DEF IDENTIFIER LEFTPARENTHESE IDENTIFIER identifier_comma_list RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // compound_statement ::= DEF IDENTIFIER LEFTPARENTHESE RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // compound_statement ::= WHILE expression COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // compound_statement ::= IF expression COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // compound_statement ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LAMBDA IDENTIFIER identifier_comma_list COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= LAMBDA COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression LEFTPARENTHESE expression expression_comma_list RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression IS expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= subscription 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= LEFTCURLYBRACKET key_datum key_datum_comma_list RIGHTCURLYBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= LEFTSQUAREBRACKET expression expression_comma_list RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= INPUT LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression binary_op expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= unary_op expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binary_op ::= AND 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binary_op ::= OR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binary_op ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binary_op ::= LESSOREQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_op ::= GREATEROREQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_op ::= LESS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binary_op ::= POW 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binary_op ::= MOD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binary_op ::= DIV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binary_op ::= MULT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("binary_op",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_op ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_op",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_comma_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_comma_list ::= COMMA expression expression_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_comma_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_statement ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_statement ::= target ASSIGN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_statement ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_statement ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_statement ::= PASS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_statement ::= PRINT expression expression_comma_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_statement_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_statement_list ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_newline_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_newline_list ::= statement statement_newline_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_newline_list ::= NEWLINE statement_newline_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_newline_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= statement_newline_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

